max(real[indic]) - real[[indic]]+1e-4,breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
ranges=list((1:250)/1000,(1:1000)/1000,(1:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
#hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
hist(
max(real[indic]) - real[[indic]]+1e-4,breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
#laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
laws=rep("",4)
ranges=list((1:250)/1000,(1:1000)/1000,(1:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
#hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
#laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
laws=rep("",4)
ranges=list((1:250)/1000,(1:1000)/1000,(1:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
#hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
#points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
###############
#
help(install.packages)
library(test)
help(test)
rcpp_hello_world()
rcpp_hello_world()
help(CMD)
help(INSTALL)
help(.Ca)
help(.Call)
library(seg)
install.packages("seg")
library(seg)
help(seg)
raw <- read.csv('/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005.csv')
head(raw)
raw <- read.csv('/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005.csv',sep=";")
head(raw)
cities <- unique(c(raw[,1],raw[,2]))
cities
c(raw[,1],raw[,2])
head(raw)
raw[,2]
is.factor(raw)
dim(raw)
head(raw)
raw <- read.csv('/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005.csv',sep=";")
dim(raw)
raw <- read.csv('/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005.csv',sep=";")
dim(raw)
raw[552,]
raw[551,]
raw[550,]
raw <- raw[1:551,]
dim(raw)
raw
c(raw[,1],raw[,2])
cities <- unique(list(raw[,1],raw[,2]))
cities
list(raw[,1],raw[,2])
l=list()
l[[3]]=1
l
l[["BUCHAREST"]]=1
l
l[["NUREMBERG (GERMANY)"]]
ids=list()
currentID = 1
for(c in raw[,1]){
if(ids[[c]])==NULL{
ids[[c]]=currentId;currentId=currentId+1
}
}
for(c in raw[,2]){
if(ids[[c]])==NULL{
ids[[c]]=currentId;currentId=currentId+1
}
}
ids=list()
currentID = 1
for(c in raw[,1]){
if(ids[[c]]==NULL){
ids[[c]]=currentId;currentId=currentId+1
}
}
for(c in raw[,2]){
if(ids[[c]]==NULL){
ids[[c]]=currentId;currentId=currentId+1
}
}
for(c in raw[,1]){
show(c)
if(ids[[c]]==NULL){
ids[[c]]=currentId;currentId=currentId+1
}
}
ids=list()
currentID = 1
for(c in raw[,1]){
show(ids[[c]])
if(ids[[c]]==NULL){
ids[[c]]=currentId;currentId=currentId+1
}
}
help(is.null)
ids=list()
currentID = 1
for(c in raw[,1]){
show(ids[[c]])
if(is.null(ids[[c]])){
ids[[c]]=currentId;currentId=currentId+1
}
}
for(c in raw[,2]){
if(is.null(ids[[c]])){
ids[[c]]=currentId;currentId=currentId+1
}
}
ids=list()
currentId = 1
for(c in raw[,1]){
show(ids[[c]])
if(is.null(ids[[c]])){
ids[[c]]=currentId;currentId=currentId+1
}
}
for(c in raw[,2]){
if(is.null(ids[[c]])){
ids[[c]]=currentId;currentId=currentId+1
}
}
ids
length(ids)
N = length(ids)
raw[1,]
N = length(ids)
odMatrix = matrix(0,N,N)
for(i in 1:nrow(raw)){
odMatrix[ids[[raw[i,1]]],ids[[raw[i,2]]]] = raw[i,3]
}
odMatrix
help(write.csv)
ids
unlist(ids)
rownames(unlist(ids))
colnames(unlist(ids))
data.frame(unlist(ids))
rownames(data.frame(unlist(ids)))
write.csv(odMatrix,'/Users//Juste/Documents/ComplexSystems/Misc//Graph//od.csv',sep=";",row.names=rownames(data.frame(unlist(ids))),col.names=rownames(data.frame(unlist(ids))))
write.table(odMatrix,'/Users//Juste/Documents/ComplexSystems/Misc//Graph//od.csv',sep=";",row.names=rownames(data.frame(unlist(ids))),col.names=rownames(data.frame(unlist(ids))))
od <- read.csv('/Users//Juste/Documents/ComplexSystems/Misc//Graph//od.csv',sep=';')
head(od)
raw <- read.csv('/Users//Juste/Documents/ComplexSystems/Misc//Graph//O_D_2005.csv',sep=";")
dim(raw)
head(raw)
ids=list()
currentId = 1
for(c in raw[,1]){
show(ids[[c]])
if(is.null(ids[[c]])){
ids[[c]]=currentId;currentId=currentId+1
}
}
for(c in raw[,2]){
if(is.null(ids[[c]])){
ids[[c]]=currentId;currentId=currentId+1
}
}
ids
N = length(ids)
odMatrix = matrix(0,N,N)
nrow(raw)
raw[1,1]
ids[[raw[1,1]]
]
ids[[raw[1,1]]]
ids
raw[1,1]
ids[[CLUJ (ROMANIA)]]
ids[["CLUJ (ROMANIA)"]]
ids[[raw[1,1]]]
ids$raw[1,1]
ids[[as.string(raw[1,1])]]
ids[[as.character(raw[1,1])]]
N = length(ids)
odMatrix = matrix(0,N,N)
for(i in 1:nrow(raw)){
odMatrix[ids[[as.character(raw[i,1])]],ids[[as.character(raw[i,2])]]] = raw[i,3]
}
write.table(odMatrix,'/Users//Juste/Documents/ComplexSystems/Misc//Graph//od.csv',sep=";",row.names=rownames(data.frame(unlist(ids))),col.names=rownames(data.frame(unlist(ids))))
N = length(ids)
odMatrix = matrix(0,N,N)
for(i in 1:nrow(raw)){
odMatrix[ids[[as.character(raw[i,1])]],ids[[as.character(raw[i,2])]]] = raw[i,3]
}
write.table(data.frame(rownames(data.frame(unlist(ids))),odMatrix),'/Users//Juste/Documents/ComplexSystems/Misc//Graph//od.csv',sep=";",row.names=FALSE,col.names=c("O/D",rownames(data.frame(unlist(ids)))))
N = length(ids)
odMatrix = matrix(0,N,N)
for(i in 1:nrow(raw)){
odMatrix[ids[[as.character(raw[i,1])]],ids[[as.character(raw[i,2])]]] = raw[i,3]
}
write.table(data.frame(rownames(data.frame(unlist(ids))),odMatrix),'/Users//Juste/Documents/ComplexSystems/Misc//Graph//od.csv',sep=";",row.names=FALSE,col.names=c("O/D",rownames(data.frame(unlist(ids)))))
install.packages('rgexf')
library(rgexf)
help(rgexf)
demo(gexf)
help(gexf)
raw <- read.csv('/Users//Juste/Documents/ComplexSystems/Misc//Graph//O_D_2005.csv',sep=";")
ids=list()
currentId = 1
for(c in raw[,1]){
show(ids[[c]])
if(is.null(ids[[c]])){
ids[[c]]=currentId;currentId=currentId+1
}
}
for(c in raw[,2]){
if(is.null(ids[[c]])){
ids[[c]]=currentId;currentId=currentId+1
}
}
ids
unlist(ids)
c(unlist(ids))
nodes = data.frame(id=unlist(ids),city=rownames(data.frame(unlist(ids)))
)
nodes
nrow(raw)
edges = data.frame(source=rep(0,nrow(raw)),target=rep(0,nrow))
edges = data.frame('source'=rep(0,nrow(raw)),target=rep(0,nrow))
edges = matrix(0,nrow(raw),2)
edges
colnames(edges) <- c('source','target')
jhead(edges)
head(edges)
data.frame(edges)
help(append)
help(write.gexf)
edges = matrix(0,nrow(raw),2)
colnames(edges) <- c('source','target')
weights = c()
for(i in 1:nrow(raw)){
edges[i,1]=ids[[as.character(raw[i,1])]]
edges[i,2]=ids[[as.character(raw[i,2])]]
weights = append(weights,raw[i,3])
}
edges
weights
write.gexf(nodes=nodes,edges=edges,edgesWeight=weights)
write.gexf(nodes=nodes,edges=edges,edgesWeight=weights,output='/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005.gexf')
years=rep(2005,100)
years-0.01
years=rep(2010,nrow(raw))
write.gexf(nodes=nodes,
edges=edges,
edgesWeight=weights,
edgeDynamic=data.frame(years,years+0.99),
output='/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005.gexf')
rand.int
help(random)
help(runif)
help(rand)
sample.int(10,nrow(raw))
sample.int(10,nrow(raw),replace=TRUE)
years = 2000 + sample.int(10,nrow(raw),replace=TRUE)
years
output='/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005_randomyears.gexf')
years = 2000 + sample.int(10,nrow(raw),replace=TRUE)
write.gexf(nodes=nodes,
edges=edges,
edgesWeight=weights,
edgeDynamic=data.frame(years,years+0.99),
output='/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005_randomyears.gexf')
help(read)
help(read.table)
scan(sep=";")
setwd('/Users//Juste/Documents/ComplexSystems/PatentsMining/')
p_kw <- read.csv('Data/processed/test_pkw_2000_1000_2015-10-19 09:40:23.085621.csv',sep=";")
help(readLines)
readlines()
readLines()
readLines(n=10)
readMappingFile <- function(file,sep){
lines = readlines(file)
res=list()
for(l in lines){
res=append(res,strsplit(l,sep))
}
return(res)
}
readMappingFile('Data/processed/test_pkw_2000_1000_2015-10-19 09:40:23.085621.csv',sep=";")
readMappingFile <- function(file,sep){
lines = readLines(file)
res=list()
for(l in lines){
res=append(res,strsplit(l,sep))
}
return(res)
}
readMappingFile('Data/processed/test_pkw_2000_1000_2015-10-19 09:40:23.085621.csv',sep=";")
readMappingFile <- function(file,sep){
lines = readLines(file)
res=list()
for(l in lines){
words = strsplit(l,sep)
# reconstruct a hashtable in the res list
res[[words[1]]]=words[2:end]
}
return(res)
}
readMappingFile('Data/processed/test_pkw_2000_1000_2015-10-19 09:40:23.085621.csv',sep=";")
readMappingFile <- function(file,sep){
lines = readLines(file)
res=list()
for(l in lines){
words = strsplit(l,sep)
# reconstruct a hashtable in the res list
res[[words[1]]]=words[2:length(words)]
}
return(res)
}
readMappingFile('Data/processed/test_pkw_2000_1000_2015-10-19 09:40:23.085621.csv',sep=";")
readMappingFile <- function(file,sep){
lines = readLines(file)
res=list()
for(l in lines){
words = strsplit(l,sep)
show(words[1])
# reconstruct a hashtable in the res list
res[[words[1]]]=words[2:length(words)]
}
return(res)
}
readMappingFile('Data/processed/test_pkw_2000_1000_2015-10-19 09:40:23.085621.csv',sep=";")
readMappingFile <- function(file,sep){
lines = readLines(file)
res=list()
for(l in lines){
words = strsplit(l,sep)
show(words[[1]])
# reconstruct a hashtable in the res list
res[[words[1]]]=words[2:length(words)]
}
return(res)
}
readMappingFile('Data/processed/test_pkw_2000_1000_2015-10-19 09:40:23.085621.csv',sep=";")
readMappingFile <- function(file,sep){
lines = readLines(file)
res=list()
for(l in lines){
words = strsplit(l,sep)[[1]]
# reconstruct a hashtable in the res list
res[[words[1]]]=words[2:length(words)]
}
return(res)
}
readMappingFile('Data/processed/test_pkw_2000_1000_2015-10-19 09:40:23.085621.csv',sep=";")
p_kw <- readMappingFile('Data/processed/test_pkw_2000_1000_2015-10-19 09:40:23.085621.csv',sep=";")
kw_p <- readMappingFile('Data/processed/test_kwp_2000_1000_2015-10-19 09:40:23.368437.csv',sep=";")
unlist(p_kw)
colnames(unlist(p_kw))
data.frame(unlist(p_kw))
rownames(data.frame(unlist(p_kw)))
head(kw_p)
for(kw in head(kw_p)){show(kw)}
for(kw in head(kw_p)){show(length(kw))}
dfids=data.frame(labels=unlist(p_kw),numids=1:length(p_kw))
unlist(p_kw)
dfids=data.frame(labels=rownames(data.frame(unlist(p_kw))),numids=1:length(p_kw))
rownames(data.frame(unlist(p_kw)))
length(rownames(data.frame(unlist(p_kw))))
length(p_kw)
length(unique(rownames(data.frame(unlist(p_kw)))))
head(p_kw)
numel(p_kw)
head(data.frame(unlist(p_kw)))
head(rownames(data.frame(unlist(p_kw))))
head(rownames(data.frame(unlist(p_kw))),n=100)
p_kw <- readMappingFile('Data/processed/test_pkw_2000_1000_2015-10-19 09:40:23.085621.csv',sep=";")
length(p_kw)
names(p_kw)
dfids=data.frame(labels=names(p_kw),numids=1:length(p_kw))
dfids
pids=list();id=1;for(n in names(p_kw)){pids[[n]]=id;id=id+1;}
pids
nodes = data.frame(id=1:length(pids),label=names(p_kw))
nodes
help(append)
rawedges=c()
for(kw in kw_p){
if(length(kw)>1){
for(i in 1:(length(kw)-1)){
for(j in (i+1):length(kw)){
rawedges=append(rawedges,pids[[kw[i]]],pids[[kw[j]]])
}
}
}
}
length(kw_p)
2 % 10
2 %% 10
rawedges=c();i=1;
for(kw in kw_p){
if(i %% 100 == 0){show(i)}
if(length(kw)>1){
for(i in 1:(length(kw)-1)){
for(j in (i+1):length(kw)){
rawedges=append(rawedges,pids[[kw[i]]],pids[[kw[j]]])
}
}
}
i=i+1;
}
rawedges=c();i=1;
for(kw in kw_p){
show(i)
if(length(kw)>1){
for(i in 1:(length(kw)-1)){
for(j in (i+1):length(kw)){
rawedges=append(rawedges,pids[[kw[i]]],pids[[kw[j]]])
}
}
}
i=i+1;
}
rawedges=c();k=1;
for(kw in kw_p){
show(k)
if(length(kw)>1){
for(i in 1:(length(kw)-1)){
for(j in (i+1):length(kw)){
rawedges=append(rawedges,pids[[kw[i]]],pids[[kw[j]]])
}
}
}
k=k+1;
}
