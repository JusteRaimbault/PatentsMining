edges = data.frame(source=rep(0,nrow(raw)),target=rep(0,nrow))
edges = data.frame('source'=rep(0,nrow(raw)),target=rep(0,nrow))
edges = matrix(0,nrow(raw),2)
edges
colnames(edges) <- c('source','target')
jhead(edges)
head(edges)
data.frame(edges)
help(append)
help(write.gexf)
edges = matrix(0,nrow(raw),2)
colnames(edges) <- c('source','target')
weights = c()
for(i in 1:nrow(raw)){
edges[i,1]=ids[[as.character(raw[i,1])]]
edges[i,2]=ids[[as.character(raw[i,2])]]
weights = append(weights,raw[i,3])
}
edges
weights
write.gexf(nodes=nodes,edges=edges,edgesWeight=weights)
write.gexf(nodes=nodes,edges=edges,edgesWeight=weights,output='/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005.gexf')
years=rep(2005,100)
years-0.01
years=rep(2010,nrow(raw))
write.gexf(nodes=nodes,
edges=edges,
edgesWeight=weights,
edgeDynamic=data.frame(years,years+0.99),
output='/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005.gexf')
rand.int
help(random)
help(runif)
help(rand)
sample.int(10,nrow(raw))
sample.int(10,nrow(raw),replace=TRUE)
years = 2000 + sample.int(10,nrow(raw),replace=TRUE)
years
output='/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005_randomyears.gexf')
years = 2000 + sample.int(10,nrow(raw),replace=TRUE)
write.gexf(nodes=nodes,
edges=edges,
edgesWeight=weights,
edgeDynamic=data.frame(years,years+0.99),
output='/Users//Juste/Documents/ComplexSystems/Misc//Graph//2005_randomyears.gexf')
help(read)
help(read.table)
scan(sep=";")
library(osmar)
help(osmar)
demo(osmar)
demo("osmar")
demo()
help(get_osm)
api <- osmsource_api()
api
help(corner_bbox)
help(extent)
area <- center_bbox(2.3815,48.8265,1,1)
area
area <- center_bbox(2.3815,48.8265,100,100)
area
help(osm_source_api())
help(osm_source_api
)
help(osmsource_api
)
data <- get_osm(area,source = api)
help(get_osm)
data
help(get_osm)
plot(data)
area <- center_bbox(2.3815,48.8265,1000,1000)
data <- get_osm(area,source = api)
data
plot(data)
area
help(osmar)
help(find)
help(tags)
help(tags)
data
data$nodes
data[[nodes]]
data$nodes
head(data$nodes)
osmar.demo()
library(osmar)
help(demo)
demo(package="osmar")
demo(navigator,package="osmar")
help(osmosis)
azjdld
osmosis <- osmsource_osmosis()
help(osmsource_osmosis)
help(osmsource_file)
data
as_osm(data)
install.packages('osmar')
install.packages('osmar')
library(osmar)
help(osmar)
area <- center_bbox(2.3815,48.8265,100,100)
data <- get_osm(area,source = api)
find(data, way(tags(k == "highway" & v == "pedestrian")))
find(data, way(tags(k == "highway")))
help(osmar.find)
help(find)
data[find(data, way(tags(k == "highway")))]
data$way[find(data, way(tags(k == "highway")))]
data$way
help(get_osm)
find(data, way(tags(k == "highway")))
hways <- find(data, way(tags(k == "highway")))
way(hways)
get_osm(way(hways))
get_osm(data,way(hways))
hways <- find(data, way(tags(k == "highway")))
hways
get_osm(way(hways))
way(hways)
data
data$nodes
data$nodes[1]
data$nodes$attrs
data$nodes$attrs[,1]
data$ways
slotNames(data$ways)
help(slotNames)
names(data$ways)
names(data$ways$tags)
names(data$ways$refs)
names(data$ways)
data$ways[1:10]
data$ways$attrs
area <- center_bbox(2.3815,48.8265,200,200)
data <- get_osm(area,source = api)
help(plot_ways)
plot_ways(data)
install.packages("igraph")
library(igraph)
demo(package="osmar")
demo(navigator,package="osmar")
area <- center_bbox(2.3815,48.8265,500,500)
data <- get_osm(area,source = api)
data
plot_ways(data,col="red")
hways <- find(data, way(tags(k == "highway")))
hways
names(data$ways)
data$ways$attrs
data$ways$attrs[hways,]
is.data.frame(data$ways$attrs)
help(data.frame)
data_ways = data$ways$attrs
data_ways[1,]
data_ways[hways,]
hways
help(way)
data_ways[1:10,]
data_ways$id
data_ways$id==hways
data_ways$id
data_ways$id == ways[1]
data_ways$id == hways[1]
data_ways$id == hways[2]
data_ways$id == hways[10]
which(data_ways$id == hways[10])
help(fapply)
help(lapply)
lapply(hways,function(x){which(data_ways$id == x)})
sapply(hways,function(x){which(data_ways$id == x)})
data_ways = data$ways$attrs[sapply(hways,function(x){which(data_ways$id == x)}),]
data_ways
plot(data_ways)
as.osmar(data_ways)
help(osmar)
as_osmar(data_ways)
help(subset)
data_ways = subset.osmar(data,way_ids=hways)
help(subset.osmar)
data_ways = subset(data,way_ids=hways)
data_ways
plot(data_ways)
plot_ways(data_ways)
as.igraph(data_ways)
as_igraph(data_ways)
data_ways
data_ways$ways
data_ways$ways$attrs
plot_ways(data_ways)
data_ways = subset(data,way_ids=hways)
help(subset)
demo(navigate)
demo(navigate,package="osmar")
demo(package="osmar")
demo(navigator,package="osmar")
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
hways <- find(data, way(tags(k == "highway")))
data_ways = subset(data,way_ids=hways)
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
hways <- find(data, way(tags(k == "highway")))
data_ways = subset(data,way_ids=hways)
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
data_ways
as_igraph(data_ways)
graph = as_igraph(data_ways)
graph
plot(graph)
help(igraph)
clusters(graph)
decompose.graph(graph)
bigcomponent = decompose.graph(graph)[[1]]
bigcomponent
help(betweeness)
help(betwenness)
betweenness(bigcomonent)
betweenness(bigcomponent)
hist(betweenness(bigcomponent))
hist(betweenness(bigcomponent),break=100)
hist(betweenness(bigcomponent),breaks=100)
degree.distribution(bigcomponent)
plot(degree.distribution(bigcomponent))
plot(degree.distribution(bigcomponent),type=l)
plot(degree.distribution(bigcomponent),type="l")
area <- center_bbox(2.3815,48.8265,2000,2000)
data <- get_osm(area,source = api)
data
hways <- find(data, way(tags(k == "highway")))
data_ways = subset(data,way_ids=hways)
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
graph = as_igraph(data_ways)
clusters(graph)
bigcomponent = decompose.graph(graph)[[1]]
hist(betweenness(bigcomponent),breaks=100)
hist(betweenness(bigcomponent),breaks=500)
hist(log(betweenness(bigcomponent)),breaks=500)
hist(betweenness(bigcomponent),breaks=500)
betweenness(bigcomponent)
mean(betweenness(bigcomponent))
radius(bigcomponent)
graph
graph$weight
E(graph)
leading.eigenvector.community(bigcomponent)
leading.eigenvector.community(bigcomponent,steps=10000)
edge.betweenness.community(bigcomponent)
membership(edge.betweenness.community(bigcomponent))
help(layout)
layout.fruchterman.reingold(graph)
layout.fruchterman.reingold(bigcomponent)
com <- membership(edge.betweenness.community(bigcomponent))
lay<-layout.fruchterman.reingold(bigcomponent)
plot(bigcomponent,layout=lay,col=com)
plot(bigcomponent,layout=lay,vertex.col=com)
help(igraph.plot)
com
plot(bigcomponent,layout=lay)
lay
plot(bigcomponent,layout=lay)
plot.graph(bigcomponent,layout=lay)
plot.igraph(bigcomponent,layout=lay)
library(rgexf)
help(rgexf)
igraph.to.graph(bigcomponent)
igraph.to.gexf(bigcomponent)
E(bigcomponent)
E(bigcomponent)$weights
help(as_igrph)
help(as_igraph)
source(as_igraph)
view_source()
graph
graph$V
V(graph)
E(graph)
V(graph)$weight
help(attr)
plot.igraph(bigcomponent,layout=layout.fruchterman.reingold,vertex.color=com)
dim(V(bigcomponent))
V(bigcomponent)
length(V(bigcomponent))
length(E(bigcomponent))
plot.igraph(bigcomponent,layout=layout.fruchterman.reingold,vertex.color=com)
help(plot.igraph)
help(layout)
plot.igraph(bigcomponent,layout=layout.auto,vertex.color=com,label=NA)
plot.igraph(bigcomponent,layout=layout.auto,vertex.color=com,vertex.label=NA)
length(E(bigcomponent))
E(bigcomponent)$weight
V(bigcomponent)$weight
E(bigcomponent)$weight
help(igraph)
str.igraph(bigcomponent)
print.igraph(bigcomponent)
get.edge.attribute(bigcomponent)
names(V(bigcomponent))
graph.attributes(graph)
edge.attributes(graph)
names(edge.attributes(graph))
names(vertex.attributes(graph))
data_ways
data_ways$nodes
names(data_ways$nodes)
naattrsmes(data_ways$nodes)
attrs(data_ways$nodes)
data_ways$nodes$attrs
data_ways$nodes$attrs[1:10,]
V(graph)$id
names(vertex.attributes(graph))
V(graph)$name
names(data$ways$attrs)
data_ways$nodes$attrs
data_ways$nodes$attrs
names(data_ways$nodes$attrs)
x = data_ways$nodes$attrs$lat
y = x = data_ways$nodes$attrs$lon
y =  data_ways$nodes$attrs$lon
x = data_ways$nodes$attrs$lat
y =  data_ways$nodes$attrs$lon
x = data_ways$nodes$attrs$lat
y = data_ways$nodes$attrs$lon
V(graph)$name
V(graph)$x=x
length(x)
length(V(graph))
length(V(graph)$name)
V(graph)$name==names(data_ways$nodes$attrs)
names(data_ways$nodes$attrs)
data_ways$nodes$attrs$id
data_ways$nodes$attrs$id==V(graph)$name
help(graph.empty)
data_ways$nodes
data_ways$nodes$attrs
head(data_ways$nodes$attrs)
head(data_ways$ways$attrs)
head(data_ways$ways)
head(data_ways$ways,n=1)
data_ways$ways[[1]]
names(data_ways$ways)
names(data_ways$ways$refs)
names(data_ways$ways$tags)
names(data_ways$ways)
names(data_ways$ways$attrs)
names(data_ways)
names(data_ways$relations)
names(data_ways$relations$attrs)
names(data_ways$relations$tags)
names(data_ways$relations$refs)
data_ways$relations$refs$type
data_ways$relations$refs$ref
summary(data_ways)
help(as_igraph)
osmar$ways$attrs$uid
data_ways$ways$attrs$uid
data_ways$ways$refs$uid
data_ways$ways$refs
names(data_ways$ways$refs)
graph = graph.edgelist(data_ways$ways$refs)
is.data.frame(data_ways$ways$refs)
is.matrix(data_ways$ways$refs)
graph = graph.edgelist(as.matrix(data_ways$ways$refs))
dim(as.matrix(data_ways$ways$refs))
help(graph.edgelist()
)
help(graph.edgelist)
dim(as.numeric(as.matrix(data_ways$ways$refs)))
as.numeric(as.matrix(data_ways$ways$refs))
length(as.numeric(as.matrix(data_ways$ways$refs)))
graph.edgelist(matrix(data=c(1,0,0,1),nrow=2))
graph.edgelist(matrix(data=c(2,1,1,2),nrow=2))
summary(as.matrix(data_ways$ways$refs))
graph = graph.edgelist(as.matrix(data_ways$ways$refs))
summary(data_ways)
library(rgexf)
help(rgexf)
help(read.gexf)
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23/35/42-CET-2015.gexf'))
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015.gexf'))
graph = gexf.to.igraph(graph_gexf)
graph_gexf
summary(graph_gexf)
check.dpl.edges(graph_gexf)
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015.gexf'))
graph = gexf.to.igraph(graph_gexf)
measures <- read.csv(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015_Nodes.csv'))
measures <- read.csv(
paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015_Nodes.csv'),
sep=';'
)
summary(measures)
measures$is_cyber
is.na(measures$cybergeo)
colNames(measures)
colnames(measures)
mean(measures$Degré.Entrant)
mean(measures$Degré.Entrant[!is.na(measures$cybergeo)])
summary(measures$Degré.Entrant[!is.na(measures$cybergeo)])
length(measures$Degré.Entrant[!is.na(measures$cybergeo)])
hist(measures$Degré.Entrant[!is.na(measures$cybergeo)])
hist(measures$Degré.Entrant[!is.na(measures$cybergeo)],breaks=100)
indeg = measures$Degré.Entrant[!is.na(measures$cybergeo)]
hist(indeg,breaks=100)
which(indeg==max(indeg))
measures[908,]
max(indeg)
cyb = measures[!is.na(measures$cybergeo),]
dim(cyb)
cyb[which(indeg==max(indeg)),]
mean(cyb$Degré.Entrant)
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.9)])
quantile(cyb$Degré.Entrant,0.9)
quantile(cyb$Degré.Entrant,0.95)
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.95)])
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.99)])
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.90)])
quantiles = (1:100)/100
quantiles
impactFactor=mean(cyb$Degré.Entrant)
help(lapply)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.10)])
quantile(cyb$Degré.Entrant,0.10)
quantiles = (60:100)/100
impactFactor=mean(cyb$Degré.Entrant)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
quantile(cyb$Degré.Entrant,1)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<=quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
quantiles = (50:100)/100
impactFactor=mean(cyb$Degré.Entrant)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<=quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
plot(quantiles,contrQuantile,type="l")
x=rnorm(100)
x
y=rnorm(100)
plot(x,y,axis=FALSE)
plot(x,y,axes=FALSE)
axis(1,pos=0,5)
axis(1,pos=0)
axis(0,pos=0)
axis(2,pos=0)
df
data
d
d <- function(w){
years = c(1,8,17)
dispo = c(27,5 + w * 10,3+w)
return(data.frame(x=years,y=dispo,xl=log(years),yl=log(dispo)))
}
d(0.5)
weights = (1:100)/100
weights
lm(x~y,d(0.5))
slotnames(lm(x~y,d(0.5)))
slotNames(lm(x~y,d(0.5)))
names(lm(x~y,d(0.5)))
names(summary(lm(x~y,d(0.5)))
)
help(append)
weights = (1:100)/100
rlin = c()
rloglin = c()
for(w in weights){
rlin = append(rlin,summary(lm(y~x,d(w)))$adj.r.squared)
rloglin = append(rloglin,summary(lm(yl~xl,d(w)))$adj.r.squared)
}
rlin
rloglin
plot(weights,rlin)
plot(weights,rloglin)
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining'))
overlap <- read.table('Models//Techno//TechnoClasses//res//overlap.csv',sep=";")
links = 0
for(i in 1:nrow(overlap)){
show(i)
links = links + (overlap[i,i]^2)
if(i<nrow(overlap)){
for(j in (i+1):ncol(overlap)){
overlap[j,j] = overlap[j,j] - overlap[i,j]
}
}
}
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining'))
Sys.getenv('CS_HOME')
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining'))
setwd('Models//Techno//TechnoClasses//res')
getwd()
o <- read.csv('overlap_snd_order_different.csv',sep=';')
head()
head(o)
max(o[,4])
overlap <- read.table('Models//Techno//TechnoClasses//res//overlap.csv',sep=";")
overlap <- read.table('overlap.csv',sep=";")
max(overlap)
head(overlap)
diag(overlap)
help(diag)
diag(overlap) <- 0
overlap[1:3,1:3]
max(overlap)
