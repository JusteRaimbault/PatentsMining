g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=times))
times
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))
mean(p0)
help("geom_density")
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=0.5,sd = 1)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)+xlim(c(-1,1))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)+xlim(c(-0.01,0.01))
end(pops)
help(end)
pops[(length(pops)-100):length(pops)]
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=0.5,sd = 1)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:2){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)
g+geom_density(aes(x=pops,colour=as.character(times)))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-10,10))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.05,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:2){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-10,10))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
for(t in 1:10){
}
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.05,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
growthRates<-function(){rnorm(n,mean=1,sd = 0.05)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:30){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
g=ggplot(data.frame(pops,times),aes(colour=times))
g+geom_density(aes(x=pops))+xlim(c(-2,10))
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,10))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
n=100000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:30){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p/mean(p));times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p-mean(p));times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
p0=runif(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p-mean(p));times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
n=100000
#p0 = rlnorm(n)
p0=runif(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
hist(p,plot=FALSE)
p0 = rlnorm(n)
#p0=runif(n)
growthRates<-function(){rnorm(n,mean=1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
p0=runif(n)
growthRates<-function(){rnorm(n,mean=1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
gc()
gc()
spatializedExpMixtureDensity <- function(gridSize,N,alpha,proba=TRUE,rmin=0,rmax=0,Pmax=1,tolThreshold=0,kernel_type="poisson"){
if(rmin==0){rmin = gridSize/N}
if(rmax==0){rmax = gridSize/N}
# patches of the grid are 1 unit size (in r_min/max units)
grid = matrix(0,gridSize,gridSize)
# matrix of coordinates
coords = matrix(c(c(matrix(rep(1:gridSize,gridSize),nrow=gridSize)),c(matrix(rep(1:gridSize,gridSize),nrow=gridSize,byrow=TRUE))),nrow=gridSize^2)
# first draw param distribs ? not needed
# for exp distribs, P_i = 2pi*d_i*r_i^2
#  -> take P from deterministic distrib ; draw r.
for(i in 1:N){
#show(i)
pop_i = Pmax*i^{-alpha}
r_i = runif(1,min=rmin,max=rmax)
d_i = pop_i / (2*pi*(r_i^2))
# find origin of that kernel
#  -> one of points such that : d(bord) > rcut and \forall \vec{x}\in D(rcut),d(\vec{x})<tolThr.
#pot = which(!pseudoClosing(grid>tolThreshold,r_i),arr.ind=TRUE)
#show(length(pot))
#if(length(pot)==0){
#  # Take a point with minimal density ?
#  pot = which(grid==min(grid),arr.ind=TRUE)
#}
# simplify : take deterministiquely (almost, after two exps only two points possible)
# BUT not close to border
#rbord = 2*rmax*log(Pmax/tolThreshold)
rbord = 2*rmax
# random center
if(max(grid)==0){
# random if no center yet
center = matrix(runif(2,min=rbord+1,max=gridSize-rbord),nrow=1)
}
else {
# else find min pop area not too close to border
pot = which(grid==min(grid[(rbord+1):(gridSize-rbord),(rbord+1):(gridSize-rbord)]),arr.ind=TRUE)
row = sample(nrow(pot),1)
center = matrix(pot[row,],nrow=1)
}
# add kernel : use kernlab laplace kernel or other
if(kernel_type=="poisson"){ker=laplacedot(sigma=1/r_i)}
if(kernel_type=="gaussian"){ker=rbfdot(sigma=1/(2*r_i^2))}
#if(kernel_type="quadratic"){ker=} # is quad kernel available ?
grid = grid + (d_i * matrix(kernelMatrix(kernel=laplacedot(sigma=1/r_i),x=coords,y=center),nrow=gridSize))
}
if(proba==TRUE){grid = grid / sum(grid)}
return(grid)
}
test = spatializedExpMixtureDensity(100,2,0.7)
library(kernlab)
test = spatializedExpMixtureDensity(100,10,0.7)
#test = spatializedExpMixtureDensity(100,3,0.7)
test = spatializedExpMixtureDensity(100,3,0.7)
test = spatializedExpMixtureDensity(100,4,0.7)
test = spatializedExpMixtureDensity(100,5,0.7)
spatializedExpMixtureDensity <- function(gridSize,N,alpha,proba=TRUE,rmin=0,rmax=0,Pmax=1,tolThreshold=0,kernel_type="poisson"){
if(rmin==0){rmin = gridSize/N}
if(rmax==0){rmax = gridSize/N}
# patches of the grid are 1 unit size (in r_min/max units)
grid = matrix(0,gridSize,gridSize)
# matrix of coordinates
coords = matrix(c(c(matrix(rep(1:gridSize,gridSize),nrow=gridSize)),c(matrix(rep(1:gridSize,gridSize),nrow=gridSize,byrow=TRUE))),nrow=gridSize^2)
# first draw param distribs ? not needed
# for exp distribs, P_i = 2pi*d_i*r_i^2
#  -> take P from deterministic distrib ; draw r.
for(i in 1:N){
show(i)
pop_i = Pmax*i^{-alpha}
r_i = runif(1,min=rmin,max=rmax)
d_i = pop_i / (2*pi*(r_i^2))
# find origin of that kernel
#  -> one of points such that : d(bord) > rcut and \forall \vec{x}\in D(rcut),d(\vec{x})<tolThr.
#pot = which(!pseudoClosing(grid>tolThreshold,r_i),arr.ind=TRUE)
#show(length(pot))
#if(length(pot)==0){
#  # Take a point with minimal density ?
#  pot = which(grid==min(grid),arr.ind=TRUE)
#}
# simplify : take deterministiquely (almost, after two exps only two points possible)
# BUT not close to border
#rbord = 2*rmax*log(Pmax/tolThreshold)
rbord = 2*rmax
# random center
if(max(grid)==0){
# random if no center yet
center = matrix(runif(2,min=rbord+1,max=gridSize-rbord),nrow=1)
}
else {
# else find min pop area not too close to border
pot = which(grid==min(grid[(rbord+1):(gridSize-rbord),(rbord+1):(gridSize-rbord)]),arr.ind=TRUE)
row = sample(nrow(pot),1)
center = matrix(pot[row,],nrow=1)
}
# add kernel : use kernlab laplace kernel or other
if(kernel_type=="poisson"){ker=laplacedot(sigma=1/r_i)}
if(kernel_type=="gaussian"){ker=rbfdot(sigma=1/(2*r_i^2))}
#if(kernel_type="quadratic"){ker=} # is quad kernel available ?
grid = grid + (d_i * matrix(kernelMatrix(kernel=laplacedot(sigma=1/r_i),x=coords,y=center),nrow=gridSize))
}
if(proba==TRUE){grid = grid / sum(grid)}
return(grid)
}
test = spatializedExpMixtureDensity(100,5,0.7)
test = spatializedExpMixtureDensity(100,4,0.7)
test = spatializedExpMixtureDensity(100,5,0.7)
persp3D(z=test)
library(plot3D)
persp3D(z=test)
test = spatializedExpMixtureDensity(100,10,0.7)
test = spatializedExpMixtureDensity(100,20,0.7)
persp3D(z=test)
library(igraph)
hep(simplify())
help(simplify)
localGraph=list()
localGraph$gg
is.null(localGraph$gg)
48*400
help(try)
#'   ! assuming q > 0
quantilesToHist<-function(q){
mids=c();density=c()
a = 1/length(q)
qq=c(0,q)
for(i in 1:length(q)){mids = append(mids,(qq[i]+qq[i+1])/2);density=append(density,a/(qq[i+1]-qq[i]))}
res=list()
res$mids=mids;res$density=density
return(res)
}
quantilesToHist(1:10)
help("try")
tryCatch({x+1})
tryCatch({x+1},error=function(e){show("tos")})
tryCatch({x+1},error=function(e){return("tos")})
tryCatch({x+1},error=function(e){return(2)})
tryCatch({x+1},error=function(e){res=2})
res
library(raster)
help("focal")
strsplit("1998;2008;2554")
strsplit("1998;2008;2554",";")
strsplit("1998;2008;2554",";")[[1]]
kwNum = 100000
yearRange=c(1976,1977,1978,1979,1980)
year = paste0(as.character(yearRange[1]),"-",as.character(yearRange[length(yearRange)]))
paste0('relevant.relevant_',year,'_full_',kwNum)
paste0('relevant.relevant_',year,'_full_',kwNum)
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining/Models/Semantic'))
library(ggplot2)
kwNum = "100000"
type="full"
years=paste0(1976:2008,"-",1980:2012)
# additional data for mse
load("processed/sizes-5years.RData")
objdf = read.csv(paste0(Sys.getenv('CS_HOME'),'/PatentsMining/Data/processed/classes/distrib_class_grantdate.csv'),sep=";")
years
year="2000-2004"
source('/Users/Juste/Documents/ComplexSystems/CityNetwork/Models/Utils/R')
source('/Users/Juste/Documents/ComplexSystems/CityNetwork/Models/Utils/R/plots.R')
graph=paste0('relevant_',year,'_full_',kwNum)
load(file=paste0('sensitivity/',graph,'_',type,'.RData'))
names(d)[ncol(d)-5]="balance"
#objdec=c(7,45,90,162,253,372,598,1023,2209)/sizes[y]
objdec=objdf[y,1:9]/sizes[y]
# # load from classes file
#
msesizes=c()
for(i in 1:length(comsizes)){
msesizes=append(msesizes,sum((log(quantile(comsizes[[i]],(1:9)/10)/d$vertices[i])-log(objdec))^2))
}
d=cbind(msesizes,d)
g = ggplot(d) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
plots=list()
for(indic in c("modularity","communities","components","vertices","msesizes","balance")){
plots[[indic]] = g+geom_raster(aes_string("degree_max","edge_th",fill=indic))+facet_grid(freqmax~freqmin)
}
multiplot(plotlist = plots,cols=3)
years
y=25
graph=paste0('relevant_',year,'_full_',kwNum)
load(file=paste0('sensitivity/',graph,'_',type,'.RData'))
names(d)[ncol(d)-5]="balance"
#objdec=c(7,45,90,162,253,372,598,1023,2209)/sizes[y]
objdec=objdf[y,1:9]/sizes[y]
# # load from classes file
#
msesizes=c()
for(i in 1:length(comsizes)){
msesizes=append(msesizes,sum((log(quantile(comsizes[[i]],(1:9)/10)/d$vertices[i])-log(objdec))^2))
}
d=cbind(msesizes,d)
g = ggplot(d) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
plots=list()
for(indic in c("modularity","communities","components","vertices","msesizes","balance")){
plots[[indic]] = g+geom_raster(aes_string("degree_max","edge_th",fill=indic))+facet_grid(freqmax~freqmin)
}
multiplot(plotlist = plots,cols=3)
colnames(d)
graph=paste0('relevant_',year,'_full_',kwNum)
load(file=paste0('sensitivity/',graph,'_',type,'.RData'))
names(d)[ncol(d)-5]="balance"
#objdec=c(7,45,90,162,253,372,598,1023,2209)/sizes[y]
objdec=objdf[y,1:9]/sizes[y]
# # load from classes file
#
msesizes=c()
for(i in 1:length(comsizes)){
msesizes=append(msesizes,sum((log(quantile(comsizes[[i]],(1:9)/10)/d$vertices[i])-log(objdec))^2))
}
d=cbind(msesizes,d)
g = ggplot(data.frame(d,freqmaxdec=freqmax/sizes[y])) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
plots=list()
for(indic in c("modularity","communities","components","vertices","msesizes","balance")){
plots[[indic]] = g+geom_raster(aes_string("kmaxdec","edge_th",fill=indic))+facet_grid(freqmaxdec~freqmin)
}
multiplot(plotlist = plots,cols=3)
graph=paste0('relevant_',year,'_full_',kwNum)
load(file=paste0('sensitivity/',graph,'_',type,'.RData'))
names(d)[ncol(d)-5]="balance"
#objdec=c(7,45,90,162,253,372,598,1023,2209)/sizes[y]
objdec=objdf[y,1:9]/sizes[y]
# # load from classes file
#
msesizes=c()
for(i in 1:length(comsizes)){
msesizes=append(msesizes,sum((log(quantile(comsizes[[i]],(1:9)/10)/d$vertices[i])-log(objdec))^2))
}
d=cbind(msesizes,d)
g = ggplot(data.frame(d,freqmaxdec=d$freqmax/sizes[y])) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
plots=list()
for(indic in c("modularity","communities","components","vertices","msesizes","balance")){
plots[[indic]] = g+geom_raster(aes_string("kmaxdec","edge_th",fill=indic))+facet_grid(freqmaxdec~freqmin)
}
multiplot(plotlist = plots,cols=3)
graph=paste0('relevant_',year,'_full_',kwNum)
load(paste0('processed/',graph,'.RData'))
g=res$g;
rm(res);gc()
g = filterGraph(g,'data/filter.csv')
source('networkConstruction.R')
g = filterGraph(g,'data/filter.csv')
# TODO DO NOT USE giant component ?
clust = clusters(g);
cmax = which(clust$csize==max(clust$csize))
ggiant=g
dd = V(ggiant)$docfreq
d = degree(ggiant)
kmin = 0
freqmaxdec=0.025
freqmin=50
kmaxdec=0.25
edge_th=50
gg=induced_subgraph(ggiant,which(d>kmin&d<kmax&dd>freqmin&dd<freqmax))
gg=subgraph.edges(gg,which(E(gg)$weight>edge_th))
clust = clusters(gg);cmax = which(clust$csize==max(clust$csize))
kmax = kmaxdec*max(d)
freqmax = freqmaxdec*nPatents
nPatents=sizes[25]
freqmax = freqmaxdec*nPatents
gg=induced_subgraph(ggiant,which(d>kmin&d<kmax&dd>freqmin&dd<freqmax))
gg=subgraph.edges(gg,which(E(gg)$weight>edge_th))
clust = clusters(gg);cmax = which(clust$csize==max(clust$csize))
gg
gg = induced.subgraph(gg,which(clust$membership==cmax))
gg
com = cluster_louvain(gg)
com
write.graph(gg,'graphs/test.gml')
write.graph(gg,'graphs/test.gml',format = 'gml')
type="giant"
year
graph=paste0('relevant_',year,'_full_',kwNum)
load(file=paste0('sensitivity/',graph,'_',type,'.RData'))
names(d)[ncol(d)-5]="balance"
#objdec=c(7,45,90,162,253,372,598,1023,2209)/sizes[y]
objdec=objdf[y,1:9]/sizes[y]
# # load from classes file
#
msesizes=c()
for(i in 1:length(comsizes)){
msesizes=append(msesizes,sum((log(quantile(comsizes[[i]],(1:9)/10)/d$vertices[i])-log(objdec))^2))
}
d=cbind(msesizes,d)
g = ggplot(data.frame(d,freqmaxdec=d$freqmax/sizes[y])) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
plots=list()
for(indic in c("modularity","communities","components","vertices","msesizes","balance")){
plots[[indic]] = g+geom_raster(aes_string("kmaxdec","edge_th",fill=indic))+facet_grid(freqmaxdec~freqmin)
}
multiplot(plotlist = plots,cols=3)
freqmaxdec
