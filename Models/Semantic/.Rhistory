d=rbind(d,data.frame(sort(China[,j],decreasing = TRUE),1:nrow(China),rep(colnames(China)[j],nrow(China))))
}
nrow(China)
China[,j]
d=data.frame()
for(j in 5:8){
d=rbind(d,data.frame(sort(China[,j],decreasing = TRUE,na.last = TRUE),1:nrow(China),rep(colnames(China)[j],nrow(China))))
}
colnames(d)<-c("size","rank","year")
colnames(d)
dim(d)
g=ggplot(d)
g+geom_point(aes(x=rnake,y=size,colour=year))
g+geom_point(aes(x=rank,y=size,colour=year))
g+geom_point(aes(x=log(rank),y=log(size),colour=year))
help("geom_bar")
192000 * 109 / 200
192000 * 109 / 200 / 3600
192000 * 109 / 200 / 3600 / 10
192000 * 109 / 200 / 3600 / 20
14/1.38
50*49/2
d=read.csv('/Users/Juste/Documents/ComplexSystems/EnergyPrice/Models/DataCollection/test/data/test_all.csv')
d=read.csv('/Users/Juste/Documents/ComplexSystems/EnergyPrice/Models/DataCollection/test/data/test_all.csv',sep=";")
d
head(d)
d=read.csv('/Users/Juste/Documents/ComplexSystems/EnergyPrice/Models/DataCollection/test/data/test_all.csv',sep=";",header=FALSE)
head(d)
head(d,n = 100)
which(d[,2]==0)
which(d[,2]==2)
unique(d[,2])
help(apply)
help(Matrix)
library(Matrix)
help("Matrix")
library(raster)
help("focal")
NCmisc::estimate.memory()
install.packages("NCmisc")
NCmisc::estimate.memory()
library(NCmisc)
help("estimate.memory")
library(dplyr)
library(ggplot2)
setwd(paste0(Sys.getenv('CS_HOME'),'/MigrationDynamics/Models/exploration'))
res <- as.tbl(read.csv('2016_12_03_02_34_10_lhs.csv'))
res$id = as.character(res$id)
res <- as.tbl(read.csv('2016_12_03_02_34_10_lhs.csv'))
res$id = as.character(res$id)
res <- as.tbl(read.csv('2016_12_03_02_34_10_lhs.csv'))
res
diff(res$accDecay)
cumsum(c(1,diff(res$accDecay)))
cumsum(c(1,diff(res$accDecay)>0))
res <- as.tbl(read.csv('2016_12_03_02_34_10_lhs.csv'))
res$id = as.character(cumsum(c(1,diff(res$accDecay)>0)))
indics = c("wealthGain","indivMigrations")
res$id = as.character(cumsum(c(1,diff(res$accDecay)>0)))
indics = c("wealthGain","indivMigrations")
# histograms
for(indic in indics){
g = ggplot(res)
g+geom_density(aes_string(x=indic,colour="id"))
}
indic
g = ggplot(res)
g+geom_density(aes_string(x=indic,colour="id"))
g = ggplot(res)
g+geom_hist(aes_string(x=indic,colour="id"))
g+geom_histogram(aes_string(x=indic,colour="id"))
indic="wealthGain"
g = ggplot(res)
g+geom_density(aes_string(x=indic,colour="id"))
res$wealthGain
indic
g = ggplot(res)
g+geom_density(aes_string(x=indic,colour="id"))
colnames(res)
hist(res$wealthGain,breaks=100)
g = ggplot(res)
g+geom_density(aes(x=wealthGain,colour=id))
is.numeric(res$wealthGain)
res <- as.tbl(read.csv('2016_12_03_02_34_10_lhs.csv'))
res$id = cumsum(c(1,diff(res$accDecay)>0))
g = ggplot(res)
g+geom_density(aes(x=wealthGain,colour=id))
res$id = as.character(cumsum(c(1,diff(res$accDecay)>0)))
res$indivMigrations
g = ggplot(res)
g+geom_density(aes_string(x=indic,group="id",colour="id"))
res$id
g = ggplot(res[res$id=="30",])
g+geom_density(aes(x=wealthGain,colour=id))
g = ggplot(res[res$id=="20",])
g+geom_density(aes(x=wealthGain,colour=id))
g = ggplot(res[res$id=="10",])
g+geom_density(aes(x=wealthGain,colour=id))
g = ggplot(res[res$id=="10"|res$id=="20",])
g+geom_density(aes(x=wealthGain,colour=id))
g = ggplot(res[res$id=="10"|res$id=="20",])
g+geom_density(aes(x=wealthGain,fill=id))
g+geom_density(aes(x=wealthGain,fill=id),alpha=0.3)
g = ggplot(res)
g+geom_density(aes(x=wealthGain,fill=id),alpha=0.3)
g = ggplot(res[res$id=="1"|res$id=="20",])
g+geom_density(aes(x=wealthGain,fill=id),alpha=0.3)
g = ggplot(res[res$id=="1"|res$id=="20"|res$id=="30",])
g+geom_density(aes(x=wealthGain,fill=id),alpha=0.3)
g = ggplot(res[res$id=="1"|res$id=="20"|res$id=="25",])
g+geom_density(aes(x=wealthGain,fill=id),alpha=0.3)
g = ggplot(res[res$id=="1"|res$id=="20"|res$id=="27",])
g+geom_density(aes(x=wealthGain,fill=id),alpha=0.3)
g = ggplot(res[res$id=="1"|res$id=="20"|res$id=="28",])
g+geom_density(aes(x=wealthGain,fill=id),alpha=0.3)
g+geom_density(aes(x=indivMigrations,fill=id),alpha=0.3)
g+geom_density(aes(x=wealthGain,fill=id),alpha=0.3)
colnames(res)
sres = res %>% group_by(id)%>% summarise(
deltaU0 = mean(deltaU0),deltaU1=mean(deltaU1),indivMigrations=mean(indivMigrations),
jobDistance0=mean(jobDistance0),jobDistance1=mean(jobDistance1),migration0=mean(migration0),
migration1=mean(migration1),wealth=mean(wealth),wealthGain=mean(wealthGain)
#transportationCost=mean(transportationCost),gravityDecay=mean(gravityDecay),
#distribSd=mean(distribSd),overlapThreshold=mean(overlapThreshold)
)
indic="wealthGain"
g = ggplot(sres,aes_string(x="accDecay",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(wealthSigma~moveAversion,scales = "free")+scale_fill_gradient(low='yellow',high='red')
res <- as.tbl(read.csv('2016_12_03_14_46_02_grid.csv'))
colnames(res)
res$id = as.character(cumsum(c(1,diff(res$accDecay)>0)))
sres = res %>% group_by(id)%>% summarise(
deltaU0 = mean(deltaU0),deltaU1=mean(deltaU1),indivMigrations=mean(indivMigrations),
jobDistance0=mean(jobDistance0),jobDistance1=mean(jobDistance1),migration0=mean(migration0),
migration1=mean(migration1),wealth=mean(wealth),wealthGain=mean(wealthGain)
#transportationCost=mean(transportationCost),gravityDecay=mean(gravityDecay),
#distribSd=mean(distribSd),overlapThreshold=mean(overlapThreshold)
)
sres
indic="wealthGain"
g = ggplot(sres,aes_string(x="accDecay",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(wealthSigma~moveAversion,scales = "free")+scale_fill_gradient(low='yellow',high='red')
g = ggplot(sres,aes_string(x="accDecay",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)#+facet_grid(wealthSigma~moveAversion,scales = "free")+scale_fill_gradient(low='yellow',high='red')
sres = res %>% group_by(id)%>% summarise(
deltaU0 = mean(deltaU0),deltaU1=mean(deltaU1),indivMigrations=mean(indivMigrations),
jobDistance0=mean(jobDistance0),jobDistance1=mean(jobDistance1),migration0=mean(migration0),
migration1=mean(migration1),wealth=mean(wealth),wealthGain=mean(wealthGain)
accDecay=mean(accDecay),costAccessRatio=mean(costAccessRatio),
wealthSigma=mean(wealthSigma),moveAversion=mean(moveAversion)
)
indic="wealthGain"
g = ggplot(sres,aes_string(x="accDecay",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(wealthSigma~moveAversion,scales = "free")+scale_fill_gradient(low='yellow',high='red')
sres = res %>% group_by(id)%>% summarise(
deltaU0 = mean(deltaU0),deltaU1=mean(deltaU1),indivMigrations=mean(indivMigrations),
jobDistance0=mean(jobDistance0),jobDistance1=mean(jobDistance1),migration0=mean(migration0),
migration1=mean(migration1),wealth=mean(wealth),wealthGain=mean(wealthGain),
accDecay=mean(accDecay),costAccessRatio=mean(costAccessRatio),
wealthSigma=mean(wealthSigma),moveAversion=mean(moveAversion)
)
indic="wealthGain"
g = ggplot(sres,aes_string(x="accDecay",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(wealthSigma~moveAversion,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="wealthGain"
g = ggplot(sres,aes_string(x="wealthSigma",y="moveAversion",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(accDecay~costAccessRatio,scales = "free")+scale_fill_gradient(low='yellow',high='red')
unique(res$moveAversion)
sres = res %>% group_by(accDecay,costAccessRatio,wealthSigma,moveAversion)%>% summarise(
deltaU0 = mean(deltaU0),deltaU1=mean(deltaU1),indivMigrations=mean(indivMigrations),
jobDistance0=mean(jobDistance0),jobDistance1=mean(jobDistance1),migration0=mean(migration0),
migration1=mean(migration1),wealth=mean(wealth),wealthGain=mean(wealthGain),
accDecay=mean(accDecay),costAccessRatio=mean(costAccessRatio),
wealthSigma=mean(wealthSigma),moveAversion=mean(moveAversion)
)
indic="wealthGain"
g = ggplot(sres,aes_string(x="wealthSigma",y="moveAversion",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(accDecay~costAccessRatio,scales = "free")+scale_fill_gradient(low='yellow',high='red')
sres = res %>% group_by(accDecay,costAccessRatio,wealthSigma,moveAversion)%>% summarise(
deltaU0 = mean(deltaU0),deltaU1=mean(deltaU1),indivMigrations=mean(indivMigrations),
jobDistance0=mean(jobDistance0),jobDistance1=mean(jobDistance1),migration0=mean(migration0),
migration1=mean(migration1),wealth=mean(wealth),wealthGain=mean(wealthGain)#,
#accDecay=mean(accDecay),costAccessRatio=mean(costAccessRatio),
#wealthSigma=mean(wealthSigma),moveAversion=mean(moveAversion)
)
indic="wealthGain"
g = ggplot(sres,aes_string(x="wealthSigma",y="moveAversion",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(accDecay~costAccessRatio,scales = "free")+scale_fill_gradient(low='yellow',high='red')
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="jobDistance0"
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="jobDistance1"
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="jobDistanceindivMigrations"
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="indivMigrations"
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="deltaU0"
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="deltaU1"
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="indivMigrations"
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="jobDistance0"
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="jobDistance1"
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="migration1"
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
indic="wealthGain"
g = ggplot(sres,aes_string(x="wealthSigma",y="costAccessRatio",fill=indic))
g+geom_raster(hjust=0,vjust=0)+facet_grid(moveAversion~accDecay,scales = "free")+scale_fill_gradient(low='yellow',high='red')
library(Matrix)
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining/Models/Semantic'))
classifdir = 'classification_window5_kwLimit100000_dispth0.06_ethunit4.1e-05'
semprefix = paste0('classification/',classifdir,'/probas_')
semsuffix = '_kwLimit100000.0_dispth0.06_ethunit4.1e-05.csv'
wyears = 1980:2012
windowSize=5
kwLimit="100000.0"
load(file=paste0(Sys.getenv('CS_HOME'),'/PatentsMining/Data/processed/classes/techno_sparse.RData'))
load(file=paste0(Sys.getenv('CS_HOME'),'/PatentsMining/Data/processed/classes/techno_sparse_primary.RData'))
mkdir()
dir.create(classifdir)
dir.create(paste0('classification/',classifdir))
for(year in wyears){
currentprobas=loadProbas(year,semprefix,semsuffix)
yearrange=paste0((year-windowSize+1),"-",year)
save(currentprobas,file=paste0('probas/',classifdir,'processed_',yearrange,'.RData'))
rm(currentprobas);gc()
}
loadSemantic<-function(year,semprefix,semsuffix){
show(paste0('loading year : ',year))
yearrange=paste0((year-windowSize+1),"-",year)
entrylist = read.csv(file=paste0(semprefix,yearrange,semsuffix),sep=";",header=FALSE)
rowinds = cumsum(c(1,as.integer(entrylist[1:(nrow(entrylist)-1),1]!=entrylist[2:nrow(entrylist),1])))
if(dim(entrylist)[2]==3){colinds=entrylist[,2]+1;vals=entrylist[,3]}else{colinds=entrylist[,3]+1;vals=entrylist[,4]}
res = sparseMatrix(i=rowinds,j=colinds,x=vals)
if(dim(entrylist)[2]==4){
res = Diagonal(x=1/rowSums(res))%*%res
}
rownames(res)<-unique(as.character(entrylist[,1]))
return(res)
}
loadProbas<-function(year,semprefix,semsuffix){
show(year)
res=list()
res$semprobas = loadSemantic(year,semprefix,semsuffix)
rowstoadd=setdiff(rownames(res$semprobas),rownames(technoMatrix))
if(length(rowstoadd)>0){
technoMatrix=rbind(technoMatrix,matrix(0,length(rowstoadd),ncol(technoMatrix)));
rownames(technoMatrix)[(nrow(technoMatrix)-length(rowstoadd)+1):nrow(technoMatrix)]=rowstoadd
}
res$technoprobas = technoMatrix[rownames(res$semprobas),]
rowstoaddprim=setdiff(rownames(res$semprobas),rownames(technoMatrixPrim))
if(length(rowstoadd)>0){
technoMatrixPrim=rbind(technoMatrixPrim,matrix(0,length(rowstoadd),ncol(technoMatrixPrim)));
rownames(technoMatrixPrim)[(nrow(technoMatrixPrim)-length(rowstoadd)+1):nrow(technoMatrixPrim)]=rowstoadd
}
res$technoprobasprim = technoMatrixPrim[rownames(res$semprobas),]
return(res)
}
sempreprocess<-function(){
# load citation matrix
load(paste0(Sys.getenv('CS_HOME'),'/PatentsMining/Data/processed/citation/network/adjacency.RData'))
# preprocess adjacency for memory purposes
for(year in wyears){
load(paste0('probas/processed_counts_',(year-windowSize+1),"-",year,'.RData'));show(year)
technoprobas=currentprobas$technoprobas;semprobas=currentprobas$semprobas;rm(currentprobas);gc()
currentnames=intersect(rownames(technoprobas),rownames(citadjacency))
namestoadd=setdiff(rownames(technoprobas),currentnames)
currentadj = citadjacency[currentnames,currentnames]
currentadj=rbind(currentadj,Matrix(0,length(namestoadd),ncol(currentadj)))
rownames(currentadj)[(nrow(currentadj)-length(namestoadd)+1):nrow(currentadj)]=namestoadd
currentadj=cbind(currentadj,Matrix(0,nrow(currentadj),length(namestoadd)))
colnames(currentadj)[(ncol(currentadj)-length(namestoadd)+1):ncol(currentadj)]=namestoadd
save(currentadj,file=paste0('probas/citadj_',(year-windowSize+1),"-",year,'.RData'))
#sizes=append(sizes,sum(citadjacency[currentnames,currentnames]));cyears=append(cyears,year)
#fromwindow=append(fromwindow,sum(citadjacency[currentnames,]))
rm(technoprobas,semprobas,currentnames,currentadj);gc()
}
}
##
#  Overlapping community modularity
#    implementing (Nicoasia et al., 2009)
#
#  simplified : linkfun = x1*x2, more efficient to compute ?
#  outer tensor product ? let do it dirtily with a loop
overlappingmodularity <- function(probas,adjacency){#,linkfun=function(p1,p2){return(p1*p2)}){
show(paste0('Computing overlapping modularity : dim(probas)=',dim(probas)[1],' ',dim(probas)[2],' ; dim(adjacency)=',dim(adjacency)[1],' ',dim(adjacency)[2]))
m = sum(adjacency)
n=nrow(probas)
kout=rowSums(adjacency)
kin=colSums(adjacency)
res=0
for(c in 1:ncol(probas)){
if(sum(probas[,c])>0){
if(c%%100==0){show(c/ncol(probas))}
a1 = Diagonal(x=probas[,c])%*%adjacency%*%Diagonal(x=probas[,c])
a2 = sum(kout*probas[,c])*sum(kin*probas[,c])*((sum(probas[,c])/n)^2)/m
res = res + sum(a1) - a2
rm(a1);gc() # loose time to call gc at each step ?
}
}
return(res/m)
}
##
# simple directed modularity
#
#  Test with probas = primtechnoprobas : membership = apply(probas,1,function(r){which(r>0)[1]})
#   NAs ?
directedmodularity<-function(membership,adjacency){
# sum([A_ij - k_iout k_j in/m ]\delta (c_i,c_j))
#
#deltac = sparseMatrix(1:nrow(adjacency),1:ncol(adjacency),x=0)
#inds=c()
#for(c in unique(membership)){inds = append(inds,which(membership==c))}
m=sum(adjacency)
kout=rowSums(adjacency);kin=colSums(adjacency)
res = 0;k=length(unique(membership))
for(c in unique(membership)){
#if(c%%100==0){show(c/k)}
inds=which(membership==c)
res = res + sum(adjacency[inds,inds]) - sum(kin[inds])*sum(kout[inds])/m
gc()
}
return(res/m)
}
computemodularities<-function(currentprobas,currentadj){
technoprobas=currentprobas$technoprobas;semprobas=currentprobas$semprobas;primtechnoprobas=currentprobas$primarytechnoprobas;
res=list()
# overlapping modularities
res$technoovmod = overlappingmodularity(technoprobas,currentadj)
res$semovmod = overlappingmodularity(semprobas,currentadj)
# simple directed modularities
primtechmembership = apply(primtechnoprobas,1,function(r){which(r>0)[1]})
semmembership = apply(semprobas,1,function(r){which(r==max(r))[1]})
res$technodirmod=directedmodularity(primtechmembership,currentadj)
res$semdirmod=directedmodularity(semmembership,currentadj)
# igraph computed measures
symadj=(currentadj+t(currentadj))/2
gsim = graph_from_adjacency_matrix(symadj,mode='undirected')
g = graph_from_adjacency_matrix(currentadj,mode='directed')
res$technodirgraphmod = modularity(g,primtechmembership)
res$semdirgraphmod =  modularity(g,semmembership)
res$technoundirgraphmod = modularity(gsim,primtechmembership)
res$semundirgraphmod =  modularity(gsim,semmembership)
gc();
return(res)
}
#m = computemodularities(currentprobas,currentadj)
# test with igraph modularity
#m2 = overlappingmodularity(probas,adjacency)
# sem = 0.05267096 ; techno = 0.004932782 -- pb to have an order of magnitude ≠ ?
#  \sum_{edges} F(p_ic,p_jc) = ? -> normalisation ?
#m2004techno = overlappingmodularity(technoprobas,currentadj)
#m2004sem = overlappingmodularity(semprobas,currentadj)
# Q : comparability of modularity with different overlap patterns (strongly concentrated for techno vs more dispersed for semantic)
# TODO : compare with thresholded modularities -- for ≠ threshold values. Q : threshold on what ?
# c=1
#
# for(c in 1:ncol(probas)){
# a = Diagonal(x=probas[,c])%*%adjacency%*%Diagonal(x=probas[,c])
# show(sum(a))
# # + sum_i (p_ic*k_i in)
#
#
# }
for(year in wyears){
currentprobas=loadProbas(year,semprefix,semsuffix)
yearrange=paste0((year-windowSize+1),"-",year)
save(currentprobas,file=paste0('probas/',classifdir,'processed_',yearrange,'.RData'))
rm(currentprobas);gc()
}
for(year in wyears){
currentprobas=loadProbas(year,semprefix,semsuffix)
yearrange=paste0((year-windowSize+1),"-",year)
save(currentprobas,file=paste0('processed/',classifdir,'/processed_',yearrange,'.RData'))
rm(currentprobas);gc()
}
classifdir = paste0('classification_window',windowSize,'_kwLimit',kwLimit,'_dispth',dispth,'_ethunit',ethunit)
dispth
classifdir
dispth=0.06
ethunit="4.1e-05"
classifdir = paste0('classification_window',windowSize,'_kwLimit',kwLimit,'_dispth',dispth,'_ethunit',ethunit)
library(Matrix)
library(ggplot2)
library(dplyr)
library(reshape2)
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining/Models/Semantic'))
#wyears = 1980:2012
wyears = 1980:2007
windowSize=5
kwLimit="100000"
dispth=0.06
ethunit="4.1e-05"
classifdir = paste0('classification_window',windowSize,'_kwLimit',kwLimit,'_dispth',dispth,'_ethunit',ethunit)
sizes=c();nsizes=c();years=c();type=c();ranks=c();sortedsizes=c();sortednsizes=c()
for(year in wyears){
load(paste0('probas/',classifdir,'/processed_',(year-windowSize+1),"-",year,'.RData'));show(year)
technoprobas=currentprobas$technoprobas;semprobas=currentprobas$semprobas;rm(currentprobas);gc()
techsizes=colSums(technoprobas);semsizes=colSums(semprobas)
techsizes=techsizes[techsizes>0];semsizes=semsizes[semsizes>0]
sizes=append(sizes,sort(techsizes,decreasing=TRUE));
years=append(years,rep(year,length(techsizes)));ranks=append(ranks,1:length(techsizes));
type=append(type,rep("technological classes",length(techsizes)))
sizes=append(sizes,sort(semsizes,decreasing=TRUE));
years=append(years,rep(year,length(semsizes)));ranks=append(ranks,1:length(semsizes));
type=append(type,rep("semantic classes",length(semsizes)))
#nsizes=append(nsizes,techsizes/nrow(technoprobas));;type=append(type,rep("techno",length(techsizes)));
#ranks=append(ranks,1:length(techsizes));sortedsizes=append(sortedsizes,sort(techsizes,decreasing = TRUE));sortednsizes=append(sortednsizes,sort(techsizes/nrow(technoprobas),decreasing = TRUE))
#sizes=append(sizes,semsizes);nsizes=append(nsizes,semsizes/nrow(semprobas));years=append(years,rep(year,length(semsizes)));type=append(type,rep("semantic",length(semsizes)))
#ranks=append(ranks,1:length(semsizes));sortedsizes=append(sortedsizes,sort(semsizes,decreasing = TRUE));sortednsizes=append(sortednsizes,sort(semsizes/nrow(semprobas),decreasing = TRUE))
}
sizes=c();nsizes=c();years=c();type=c();ranks=c();sortedsizes=c();sortednsizes=c()
for(year in wyears){
load(paste0('processed/',classifdir,'/processed_',(year-windowSize+1),"-",year,'.RData'));show(year)
technoprobas=currentprobas$technoprobas;semprobas=currentprobas$semprobas;rm(currentprobas);gc()
techsizes=colSums(technoprobas);semsizes=colSums(semprobas)
techsizes=techsizes[techsizes>0];semsizes=semsizes[semsizes>0]
sizes=append(sizes,sort(techsizes,decreasing=TRUE));
years=append(years,rep(year,length(techsizes)));ranks=append(ranks,1:length(techsizes));
type=append(type,rep("technological classes",length(techsizes)))
sizes=append(sizes,sort(semsizes,decreasing=TRUE));
years=append(years,rep(year,length(semsizes)));ranks=append(ranks,1:length(semsizes));
type=append(type,rep("semantic classes",length(semsizes)))
#nsizes=append(nsizes,techsizes/nrow(technoprobas));;type=append(type,rep("techno",length(techsizes)));
#ranks=append(ranks,1:length(techsizes));sortedsizes=append(sortedsizes,sort(techsizes,decreasing = TRUE));sortednsizes=append(sortednsizes,sort(techsizes/nrow(technoprobas),decreasing = TRUE))
#sizes=append(sizes,semsizes);nsizes=append(nsizes,semsizes/nrow(semprobas));years=append(years,rep(year,length(semsizes)));type=append(type,rep("semantic",length(semsizes)))
#ranks=append(ranks,1:length(semsizes));sortedsizes=append(sortedsizes,sort(semsizes,decreasing = TRUE));sortednsizes=append(sortednsizes,sort(semsizes/nrow(semprobas),decreasing = TRUE))
}
g=ggplot(data.frame(size=sizes,year=as.character(years),rank=ranks,type=type))
g+geom_line(aes(x=rank,y=size,colour=year,group=year))+
scale_x_log10()+scale_y_log10()+facet_wrap(~type,scales="fixed")+ylab("size") + theme(axis.title = element_text(size = 22),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15))
ggsave(file=paste0(Sys.getenv("CS_HOME"),'/PatentsMining/Results/Semantic/Analysis/window5/sizes/all_raw_counts.pdf'),width=10,height=5)
overlaps = c();years=c();measures=c();types=c();filters=c();nullovs=c();classnum=c();pcount=c();gc()
ovsize=c()
for(year in wyears){
load(paste0('processed/',classifdir,'/processed_',(year-windowSize+1),"-",year,'.RData'));show(year)
technoprobas=currentprobas$technoprobas;semprobas=currentprobas$semprobas;rm(currentprobas);gc()
techov=t(technoprobas)%*%technoprobas;
diag(techov)<-0
semov=t(semprobas)%*%semprobas;
diag(semov)<-0
interov=t(technoprobas)%*%semprobas
#nullovs=append(nullovs,length(which(techov==0)));nullovs=append(nullovs,length(which(semov==0)))
#ovsize=append(ovsize,c(sum(techov),sum(semov)))
#types=append(types,c("techno","semantic"));years=append(years,c(year,year))
#classnum=append(classnum,ncol(techov));classnum=append(classnum,ncol(semov))
#pcount=append(pcount,c(nrow(semprobas),nrow(semprobas)))
# NON NORMALIZED
#overlaps=append(overlaps,as.numeric(interov));n=length(as.numeric(interov));years=append(years,rep(year,n));types=append(types,rep("techno",n))#;measures=append(measures,rep("real",n));filters=append(filters,rep("all",n))
#overlaps=append(overlaps,as.numeric(techov));n=length(as.numeric(techov));years=append(years,rep(year,n));types=append(types,rep("techno",n))#;measures=append(measures,rep("real",n));filters=append(filters,rep("all",n))
#overlaps=append(overlaps,as.numeric(semov));n=length(as.numeric(semov));years=append(years,rep(year,n));types=append(types,rep("semantic",n))#;measures=append(measures,rep("real",n));filters=append(filters,rep("all",n))
#inds=which(techov>0);overlaps=append(overlaps,techov[inds]);n=length(inds);years=append(years,rep(year,n));types=append(types,rep("techno",n))#;measures=append(measures,rep("real",n));filters=append(filters,rep("positive",n))
#inds=which(semov>0);overlaps=append(overlaps,semov[inds]);n=length(inds);years=append(years,rep(year,n));types=append(types,rep("semantic",n))#;measures=append(measures,rep("real",n));filters=append(filters,rep("positive",n))
# # NORMALIZED PATENT COUNT
overlaps=append(overlaps,as.numeric(interov)/nrow(technoprobas));n=length(as.numeric(interov));years=append(years,rep(year,n));types=append(types,rep("inter",n));measures=append(measures,rep("norm-patents",n));#filters=append(filters,rep("all",n))
overlaps=append(overlaps,as.numeric(techov)/nrow(technoprobas));n=length(as.numeric(techov));years=append(years,rep(year,n));types=append(types,rep("techno",n));measures=append(measures,rep("norm-patents",n));#filters=append(filters,rep("all",n))
overlaps=append(overlaps,as.numeric(semov)/nrow(semprobas));n=length(as.numeric(semov));years=append(years,rep(year,n));types=append(types,rep("semantic",n));measures=append(measures,rep("norm-patents",n));#filters=append(filters,rep("all",n))
#inds=which(techov>0);overlaps=append(overlaps,techov[inds]/nrow(technoprobas));n=length(inds);years=append(years,rep(year,n));types=append(types,rep("techno",n));#measures=append(measures,rep("norm-patents",n));filters=append(filters,rep("positive",n))
#inds=which(semov>0);overlaps=append(overlaps,semov[inds]/nrow(semprobas));n=length(inds);years=append(years,rep(year,n));types=append(types,rep("semantic",n));#measures=append(measures,rep("norm-patents",n));filters=append(filters,rep("positive",n))
# # RELATIVE OVERLAP
technorm=Matrix(1,nrow(techov),ncol(techov))%*%Diagonal(x=colSums(technoprobas));
semnorm=Matrix(1,nrow(semov),ncol(semov))%*%Diagonal(x=colSums(semprobas));
internorm=2*(Diagonal(x=1/colSums(technoprobas))%*%Matrix(1,ncol(technoprobas),ncol(semprobas)))+(Matrix(1,ncol(technoprobas),ncol(semprobas))%*%Diagonal(x=1/colSums(semprobas)))
interov=interov*internorm
techov=techov*2/(technorm+t(technorm))
semov=semov*2/(semnorm+t(semnorm))
overlaps=append(overlaps,as.numeric(interov));n=length(as.numeric(interov));years=append(years,rep(year,n));types=append(types,rep("inter-classifications",n));measures=append(measures,rep("relative",n));#filters=append(filters,rep("all",n))
overlaps=append(overlaps,as.numeric(techov));n=length(as.numeric(techov));years=append(years,rep(year,n));types=append(types,rep("technological classification",n));measures=append(measures,rep("relative",n));#filters=append(filters,rep("all",n))
overlaps=append(overlaps,as.numeric(semov));n=length(as.numeric(semov));years=append(years,rep(year,n));types=append(types,rep("semantic classification",n));measures=append(measures,rep("relative",n));#filters=append(filters,rep("all",n))
##inds=which(techov>0);overlaps=append(overlaps,techov[inds]/nrow(technoprobas));n=length(inds);years=append(years,rep(year,n));types=append(types,rep("techno",n));#measures=append(measures,rep("relative",n));filters=append(filters,rep("positive",n))
##inds=which(semov>0);overlaps=append(overlaps,semov[inds]/nrow(semprobas));n=length(inds);years=append(years,rep(year,n));types=append(types,rep("semantic",n));#measures=append(measures,rep("relative",n));filters=append(filters,rep("positive",n))
rm(techov,semov,technorm,semnorm,technoprobas,semprobas);gc()
}
resdir=paste0(Sys.getenv('CS_HOME'),'/PatentsMining/Results/Semantic/Analysis/window5/overlap/')
df=data.frame(overlap=overlaps,year=as.character(years),type=types,measure=measures)#,filter=filters)
rm(overlaps,years,types);gc()
save(df,file="res/full-overlaps.RData")
gc()
plotsOverlap <-function(measure,xlabel,file){
g=ggplot(df[df$measure==measure,],aes(x=overlap,colour=year))
g+geom_density(alpha=0.25)+xlab(measure)+ylab("density")+
scale_x_log10()+facet_wrap(~type,scales="free_y")+
theme(axis.title = element_text(size = 22), axis.text.x = element_text(size = 15),  axis.text.y = element_text(size = 15))
ggsave(file=paste0(Sys.getenv("CS_HOME"),'/PatentsMining/Results/Semantic/Analysis/window5/overlap/',file,'_all_density_semcounts.pdf'),width=10,height=5)
rm(g);gc()
dsum = df[df$measure==measure,]%>% group_by(year,type) %>% summarise(meanoverlap=mean(overlap,na.rm=TRUE),mi=quantile(overlap,0.1,na.rm=TRUE),ma=quantile(overlap,0.9,na.rm=TRUE))
gsum=ggplot(dsum,aes(x=year,y=meanoverlap,group=type))#,colour=type,group=type),show.legend = FALSE)
labs=rep("",length(wyears));labs[seq(from=1,to=length(labs),by=5)]=as.character(wyears[seq(from=1,to=length(labs),by=5)])
gsum+geom_point()+geom_line()+#geom_errorbar(aes(ymin=mi,ymax=ma))+
facet_wrap(~type,scales ="free_y")+
scale_x_discrete(breaks=as.character(wyears),labels=labs)+ylab(ylabel)+
theme(axis.title = element_text(size = 22), axis.text.x = element_text(size = 15),  axis.text.y = element_text(size = 15))
ggsave(file=paste0(Sys.getenv("CS_HOME"),'/PatentsMining/Results/Semantic/Analysis/window5/overlap/',file,'_all_ts_semcounts.pdf'),width=10,height=5)
}
plotsOverlap("norm-patents","normalized overlap","patentnorm")
