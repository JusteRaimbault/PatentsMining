resdir = paste0(Sys.getenv('CN_HOME'),'/Results/SpatioTempCausality/Synthetic/arma/')
#'
#' rho[X(t-tau),Y(t)]
getLaggedCorrs <- function(x,y,taumax=10){
res=data.frame()
for(tau in -taumax:taumax){
if(tau>=0){xx=x;yy=y}else{xx=y;yy=x}
corrs = cor.test(xx[1:(length(xx)-abs(tau))],yy[(abs(tau)+1):(length(yy))])
estimate = corrs$estimate
rhomin = corrs$conf.int[1]
rhomax = corrs$conf.int[2]
res=rbind(res,data.frame(rho=estimate,rhomin = rhomin,rhomax=rhomax,tau=tau,pval=corrs$p.value,tstat=corrs$statistic))
}
return(res)
}
plotLaggedCorrs <- function(X,taumax=10){
df = data.frame()
for(j1 in 1:(ncol(X)-1)){
for(j2 in (j1+1):ncol(X)){
df=rbind(df,data.frame(getLaggedCorrs(X[,j1],X[,j2],taumax = taumax),vars=paste0(j1,"->",j2)))
}
}
g=ggplot(df,aes(x=tau,y=rho,colour=vars,group=vars,ymin=rhomin,ymax=rhomax))
g+geom_line()+geom_errorbar()+geom_point()+stdtheme
}
laggedCorrs <- function(X,taumax=10,format="rowdf"){
df = data.frame()
if(format=="coldf"){df=c()}
for(j1 in 1:(ncol(X)-1)){
for(j2 in (j1+1):ncol(X)){
corrs = getLaggedCorrs(X[,j1],X[,j2],taumax = taumax)
if(format=="rowdf"){
df=rbind(df,data.frame(corrs,vars=paste0(j1,"->",j2)))
}
if(format=="coldf"){
df = append(df,corrs$rho)
}
}
}
if(format=="rowdf"){
return(df)
}
if(format=="coldf"){
return(data.frame(matrix(df,ncol=length(df))))
}
}
nbootstrap = 10000
maxai = 0.1
lag = 2
# set seed for reproducibility
set.seed(0)
trajs=data.frame();eigs=data.frame()
for(b in 1:nbootstrap){
if(b%%100==0){show(b)}
#ar=array(data = c(diag(3),runif(9,-0.5,0.5)),dim = c(3,3,2))
#x=marima.sim(kvar=3,ar.model = ar,nsim=10000)
ar=array(data = c(diag(2),rep(0,4),c(0,runif(1,-maxai,maxai),runif(1,-maxai,maxai),0)),dim = c(2,2,3))
x=marima.sim(kvar=2,ar.model = ar,nsim=10000)
plotLaggedCorrs(x)
trajs=rbind(trajs,laggedCorrs(x,format = "coldf"))
#eigs=rbind(eigs,eigen(ar[,,2])$values)
eigs=rbind(eigs,c(ar[1,2,3],ar[2,1,3]))
}
set.seed(0)
trajs=data.frame();eigs=data.frame()
for(b in 1:nbootstrap){
if(b%%100==0){show(b)}
#ar=array(data = c(diag(3),runif(9,-0.5,0.5)),dim = c(3,3,2))
#x=marima.sim(kvar=3,ar.model = ar,nsim=10000)
ar=array(data = c(diag(2),rep(0,4),c(0,runif(1,-maxai,maxai),runif(1,-maxai,maxai),0)),dim = c(2,2,3))
x=marima.sim(kvar=2,ar.model = ar,nsim=10000)
#plotLaggedCorrs(x)
trajs=rbind(trajs,laggedCorrs(x,format = "coldf"))
#eigs=rbind(eigs,eigen(ar[,,2])$values)
eigs=rbind(eigs,c(ar[1,2,3],ar[2,1,3]))
}
help(chol)
coords = matrix(runif(2*n),ncol = 2)
n = 20
coords = matrix(runif(2*n),ncol = 2)
coords
plot(coords)
help(spDist )
??spDist
library(sp)
dist(coords)
d = dist(coords)
chol(d)
d
d[1,1]
d = as.matrix(dist(coords))
d[1,1]
d[1,2]
d[2,1]
chol(d)
helpp(chol)
help(chol)
diag(d)<-1
chol(d)
d
chol(d,pivot=T)
d = as.matrix(dist(coords))
length(d)
d = d + matrix(rnorm(length(d),sd = 0.01),nrow = nrow(d))
diag(d)<-1
chol(d,pivot=T)
c = chol(d,pivot=T)
c%*%t(c)
2000/60
8000*4
8000*4/2000/60
8000*4/2000
8000*4/2000
8000*4/2000*100/60
8000*4/2000*50/60
library(dplyr)
library(ggplot2)
library(reshape2)
library(GGally)
setwd(paste0(Sys.getenv('CS_HOME'),'/SimulationModels/Models/Dynamicity-model'))
source('analysis/functions.R')
resdir = '20181128_PSE_GRID'
vols=hypervolumes('calibration/20181128_PSE_GRID/',indics)
g=ggplot(data=data.frame(generation=vols$gens,volume=vols$vols),aes(x=generation,y=volume))
g+geom_point()+geom_line()
ggsave(file=paste0(figdir,'hypervolume.png'),width=15,height=10,units='cm')
g=ggplot(data=data.frame(generation=vols$gens[2:length(vols$gens)],volumediff=diff(vols$vols)/max(vols$vols)),aes(x=generation,y=volumediff))
g+geom_point()+geom_line()
ggsave(file=paste0(figdir,'hypervolumediff.png'),width=15,height=10,units='cm')
# number of patterns
patt=patterns('calibration/20181128_PSE_GRID/')
figdir=paste0('results/',resdir,'/');dir.create(figdir)
segments = c("high_with_sc","medium_with_sc","low_with_sc","high_without_sc","medium_without_sc","low_without_sc")
indics=c(paste0("households",segments),paste0("householdsVar",segments),
paste0("population",segments),paste0("populationVar",segments)
)
popindics = paste0("population",segments)
popvarindics = paste0("populationVar",segments)
housindics = paste0("households",segments)
housVarindics = paste0("householdsVar",segments)
vols=hypervolumes('calibration/20181128_PSE_GRID/',indics)
g=ggplot(data=data.frame(generation=vols$gens,volume=vols$vols),aes(x=generation,y=volume))
g+geom_point()+geom_line()
ggsave(file=paste0(figdir,'hypervolume.png'),width=15,height=10,units='cm')
g=ggplot(data=data.frame(generation=vols$gens[2:length(vols$gens)],volumediff=diff(vols$vols)/max(vols$vols)),aes(x=generation,y=volumediff))
g+geom_point()+geom_line()
ggsave(file=paste0(figdir,'hypervolumediff.png'),width=15,height=10,units='cm')
patt=patterns('calibration/20181128_PSE_GRID/')
g=ggplot(data=data.frame(generation=patt$gens,patterns=patt$patterns),aes(x=generation,y=patterns))
g+geom_point()+geom_line()
ggsave(file=paste0(figdir,'patterns.png'),width=15,height=10,units='cm')
g=ggplot(data=data.frame(generation=patt$gens[2:length(patt$gens)],patternsdiff=diff(patt$patterns)/max(patt$patterns)),aes(x=generation,y=patternsdiff))
g+geom_point()+geom_line()
ggsave(file=paste0(figdir,'patternsdiff.png'),width=15,height=10,units='cm')
patt=patterns('calibration/20181128_PSE_GRID/')
g=ggplot(data=data.frame(generation=patt$gens,patterns=patt$patterns),aes(x=generation,y=patterns))
g+geom_point()+geom_line()
ggsave(file=paste0(figdir,'patterns.png'),width=15,height=10,units='cm')
g=ggplot(data=data.frame(generation=patt$gens[2:length(patt$gens)],patternsdiff=diff(patt$patterns)/max(patt$patterns)),aes(x=generation,y=patternsdiff))
g+geom_point()+geom_line()
ggsave(file=paste0(figdir,'patternsdiff.png'),width=15,height=10,units='cm')
reg = lm(data=data.frame(lpatterns=log(patt$patterns),ltime=log(patt$gens)),lpatterns~ltime)
summary(reg)
AIC(reg)
2/3
g=ggplot(data=data.frame(generation=vols$gens,volume=vols$vols),aes(x=generation,y=volume))
g+geom_point()+geom_line()
ggsave(file=paste0(figdir,'hypervolume.png'),width=15,height=10,units='cm')
reg = lm(data=data.frame(lvols=log(vols$vols),ltime=log(vols$gens)),lvols~ltime)
summary(reg)
1/8
sres=res[,indics]
for(j in 1:ncol(sres)){sres[,j]=(sres[,j]-min(sres[,j]))/(max(sres[,j])-min(sres[,j]))}
res<-as.tbl(read.csv('calibration/20181128_PSE_GRID/population61000.csv'))
sres=res[,indics]
for(j in 1:ncol(sres)){sres[,j]=(sres[,j]-min(sres[,j]))/(max(sres[,j])-min(sres[,j]))}
pca=prcomp(sres[,indics])
summary(pca)
reg = lm(data=data.frame(lpatterns=log(patt$patterns),ltime=log(patt$gens)),lpatterns~ltime)
summary(reg)
reg = lm(data=data.frame(lvols=log(vols$vols),ltime=log(vols$gens)),lvols~ltime)
summary(reg)
1/5
1/6
1/7
setwd(paste0(Sys.getenv('CS_HOME'),'/NoisyEA/Results/MGOBenchmark'))
library(dplyr)
library(ggplot2)
resdir='20181120_103258_DIRECT_SAMPLING';file.remove(paste0(resdir,'/data/20181030_155322_all.csv'));file.remove(paste0(resdir,'/data/20181030_155322_all_params.csv'));file.remove(paste0(resdir,'/data/20181030_155815_RS.csv'));file.remove(paste0(resdir,'/data/20181030_155815_RS_params.csv'))
figdir=paste0(Sys.getenv('CS_HOME'),'/NoisyEA/Results/MGOBenchmark/',resdir,'/');dir.create(figdir)
res=data.frame()
for(f in list.files(paste0(resdir,'/data'))){
if(substr(f,nchar(f)-9,nchar(f))!='params.csv'){
currentdata=as.tbl(read.csv(paste0(resdir,'/data/',f),sep=';'))
# read parameters
params = read.csv(paste0(resdir,'/data/',strsplit(f,'.',fixed = T)[[1]][1],'_params.csv'),sep=";")
for(param in names(params)){currentdata[[param]]=rep(params[[param]],nrow(currentdata))}
res=rbind(res,currentdata)
}
}
res=data.frame()
for(f in list.files(paste0(resdir,'/data'))){
show(f)
if(substr(f,nchar(f)-9,nchar(f))!='params.csv'){
currentdata=as.tbl(read.csv(paste0(resdir,'/data/',f),sep=';'))
# read parameters
params = read.csv(paste0(resdir,'/data/',strsplit(f,'.',fixed = T)[[1]][1],'_params.csv'),sep=";")
for(param in names(params)){currentdata[[param]]=rep(params[[param]],nrow(currentdata))}
res=rbind(res,currentdata)
}
}
resdir='20181120_103258_DIRECT_SAMPLING';file.remove(paste0(resdir,'/data/20181030_155322_all.csv'));file.remove(paste0(resdir,'/data/20181030_155322_all_params.csv'));file.remove(paste0(resdir,'/data/20181030_155815_RS.csv'));file.remove(paste0(resdir,'/data/20181030_155815_RS_params.csv'));file.remove(paste0(resdir,'/data/test'))
resdir='20181120_103258_DIRECT_SAMPLING';file.remove(paste0(resdir,'/data/20181030_155322_all.csv'));file.remove(paste0(resdir,'/data/20181030_155322_all_params.csv'));file.remove(paste0(resdir,'/data/20181030_155815_RS.csv'));file.remove(paste0(resdir,'/data/20181030_155815_RS_params.csv'));file.remove(paste0(resdir,'/data/test/test.csv'));file.remove(paste0(resdir,'/data/test'))
res=data.frame()
for(f in list.files(paste0(resdir,'/data'))){
show(f)
if(substr(f,nchar(f)-9,nchar(f))!='params.csv'){
currentdata=as.tbl(read.csv(paste0(resdir,'/data/',f),sep=';'))
# read parameters
params = read.csv(paste0(resdir,'/data/',strsplit(f,'.',fixed = T)[[1]][1],'_params.csv'),sep=";")
for(param in names(params)){currentdata[[param]]=rep(params[[param]],nrow(currentdata))}
res=rbind(res,currentdata)
}
}
res$problem = sapply(strsplit(as.character(res$id),'_'),function(l){paste(l[1:3],sep="",collapse = "_")})
dim(res)
res$algo = sapply(strsplit(as.character(res$id),'_'),function(l){strsplit(l[4],"-")[[1]][1]})
res$problem
epsilon = 1e-7
res$solved = ifelse(res$precision < epsilon,1,0)
res$runfactor = cut(log(res$runs),breaks = 20,labels = F)
sres = res %>% group_by(algo,sigma,runfactor)  %>% summarise(
success = sum(solved)/n()
)
g=ggplot(sres,aes(x=runfactor,y=success,group=algo,colour=algo))
g+geom_point()+geom_line()+facet_wrap(~sigma)
res%>% group_by(problem,algo,sigma) %>% summarise(count=n())
names(res)
res$runs
res$runs
hist(res$runs,breaks = 100)
hist(log(res$runs),breaks = 20)
summary(res$runs)
res[res$runs>1000&res$runs<21000,]
res=res[res$runs>1000&res$runs<21000,]
res$runfactor = cut(res$runs,breaks = 20,labels = F)
sres = res %>% group_by(algo,sigma,runfactor)  %>% summarise(
success = sum(solved)/n()
)
g=ggplot(sres,aes(x=runfactor,y=success,group=algo,colour=algo))
g+geom_point()+geom_line()+facet_wrap(~sigma)
ggsave(file=paste0(figdir,'successrate-runs_epsilon',epsilon,'.png'),width=15,height=10,units='cm')
epsilon = 1e-3
res=res[res$runs>1000&res$runs<21000,]
res$solved = ifelse(res$precision < epsilon,1,0)
res$runfactor = cut(res$runs,breaks = 20,labels = F)
sres = res %>% group_by(algo,sigma,runfactor)  %>% summarise(
success = sum(solved)/n()
)
g=ggplot(sres,aes(x=runfactor,y=success,group=algo,colour=algo))
g+geom_point()+geom_line()+facet_wrap(~sigma)
epsilon = 1e-1
res=res[res$runs>1000&res$runs<21000,]
res$solved = ifelse(res$precision < epsilon,1,0)
res$runfactor = cut(res$runs,breaks = 20,labels = F)
sres = res %>% group_by(algo,sigma,runfactor)  %>% summarise(
success = sum(solved)/n()
)
g=ggplot(sres,aes(x=runfactor,y=success,group=algo,colour=algo))
g+geom_point()+geom_line()+facet_wrap(~sigma)
res%>% group_by(problem,algo,sigma) %>% summarise(count=n())
res%>% group_by(problem,algo,sigma,runs) %>% summarise(count=n())
res%>% group_by(problem,algo,sigma,runfactor) %>% summarise(count=n())
sres = res %>% group_by(algo,sigma,runfactor)  %>% summarise(
count=n(),
success = sum(solved)/n()
)
1/6
library(dplyr)
library(ggplot2)
library(reshape2)
library(GGally)
setwd(paste0(Sys.getenv('CS_HOME'),'/SimulationModels/Models/Dynamicity-model'))
source('analysis/functions.R')
resdir = '20181128_PSE_GRID'
#resdir = '20181124_PSEPCA_GRID'
#res<-as.tbl(read.csv('calibration/20181120_PSE_GRID/population16584.csv'))
#res<-as.tbl(read.csv('calibration/20181124_PSEPCA_GRID/population12238.csv'))
res<-as.tbl(read.csv('calibration/20181128_PSE_GRID/population61000.csv'))
figdir=paste0('results/',resdir,'/');dir.create(figdir)
#
segments = c("high_with_sc","medium_with_sc","low_with_sc","high_without_sc","medium_without_sc","low_without_sc")
indics=c(paste0("households",segments),paste0("householdsVar",segments),
paste0("population",segments),paste0("populationVar",segments)
)
popindics = paste0("population",segments)
popvarindics = paste0("populationVar",segments)
housindics = paste0("households",segments)
housVarindics = paste0("householdsVar",segments)
sres=res[,indics]
for(j in 1:ncol(sres)){sres[,j]=(sres[,j]-min(sres[,j]))/(max(sres[,j])-min(sres[,j]))}
pca=prcomp(sres[,indics])
summary(pca)
ggpairs(data=res[,indics], mapping = aes(alpha=0.4,pch='.'))
rot = as.matrix(res[,indics])%*%pca$rotation
hist(rot[,1],breaks=100)
setwd(paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Models/urbangrowth/openmole/calibration'))
library(dplyr)
library(ggplot2)
resdir = paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Results/Calibration/',sourcedir);dir.create(resdir)
sourcedir = 'CALIB_GRID_intgib_BR_20181209_185930/'
resdir = paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Results/Calibration/',sourcedir);dir.create(resdir)
source(paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Models/Analysis/functions.R'))
sourcedir = 'CALIB_GRID_intgib_BR_20181209_185930/'
resdir = paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Results/Calibration/',sourcedir);dir.create(resdir)
vols=hypervolumes(paste0('calibration/',sourcedir),indics)
sourcedir = 'CALIB_GRID_intgib_BR_20181209_185930/'
resdir = paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Results/Calibration/',sourcedir);dir.create(resdir)
vols=hypervolumes(sourcedir,indics)
indics
indics=c('logmse','mselog')
vols=hypervolumes(sourcedir,indics)
source(paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Models/Analysis/functions.R'))
indics=c('logmse','mselog')
vols=hypervolumes(sourcedir,indics)
warnings()
source(paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Models/Analysis/functions.R'))
sourcedir = 'CALIB_GRID_intgib_BR_20181209_185930/'
resdir = paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Results/Calibration/',sourcedir);dir.create(resdir)
indics=c('logmse','mselog')
vols=hypervolumes(sourcedir,indics)
source(paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Models/Analysis/functions.R'))
vols=hypervolumes(sourcedir,indics)
g=ggplot(data=data.frame(generation=vols$gens,volume=vols$vols),aes(x=generation,y=volume))
g+geom_point()+geom_line()
list.files(sourcedir)
source(paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Models/Analysis/functions.R'))
dists = frontDiffs(sourcedir)
g=ggplot(data=data.frame(generation=dists$gens,distance=dists$dists),aes(x=generation,y=distance))
g+geom_point()+geom_line()
ggsave(file=paste0(resdir,'frontdiffs.png'),width=15,height=10,units='cm')
pop29000 = read.csv(file=paste0(sourcedir,'population29000.csv'))
g=ggplot(data.frame(rbind(cbind(pop29000,gen=rep("29",nrow(pop29000))),cbind(pop30000,gen=rep("30",nrow(pop30000))))),aes(x=logmse,y=mselog,color=gen))
pop29000 = read.csv(file=paste0(sourcedir,'population29000.csv'))
pop30000 = read.csv(file=paste0(sourcedir,'population30000.csv'))
g=ggplot(data.frame(rbind(cbind(pop29000,gen=rep("29",nrow(pop29000))),cbind(pop30000,gen=rep("30",nrow(pop30000))))),aes(x=logmse,y=mselog,color=gen))
g+geom_point()
pop31000 = read.csv(file=paste0(sourcedir,'population31000.csv'))
pop31000 = read.csv(file=paste0(sourcedir,'population31000.csv'))
g=ggplot(data.frame(rbind(cbind(pop29000,gen=rep("29",nrow(pop29000))),cbind(pop30000,gen=rep("30",nrow(pop30000))),cbind(pop31000,gen=rep("31",nrow(pop31000))))),aes(x=logmse,y=mselog,color=gen))
g+geom_point()
library(rgeos)
library(sp)
chull(pop29000$logmse,pop29000$mselog)
pop29000$mselog
chull(x=pop29000$logmse,y=pop29000$mselog)
help(chull)
p29 = Polygon(chull(x=pop29000$logmse,y=pop29000$mselog),hole = F)
p29 = Polygon(pop29000[c(chull(x=pop29000$logmse,y=pop29000$mselog),1),indics],hole = F)
p29
plot(p29)
p29@area
p30 = Polygon(pop30000[c(chull(x=pop30000$logmse,y=pop30000$mselog),1),indics],hole = F)
p30@area
p31 = Polygon(pop31000[c(chull(x=pop31000$logmse,y=pop31000$mselog),1),indics],hole = F)
p31@area
plot(p30)
source(paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Models/Analysis/functions.R'))
dists = polygonVolumes(sourcedir,bounds=c(33.5,800))
polygonVolumes <-function(popdirectory,bounds=c(Inf,Inf),objectives=c('logmse','mselog')){
files=list.files(popdirectory)
gens = sort(sapply(strsplit(files,'population'),function(l){sapply(strsplit(l[2],split = '.',fixed = T),function(l){as.numeric(l[1])})}))
volumes=c()
for(i in 2:length(gens)){
show(i)
currentfront=read.csv(file=paste0(popdirectory,'/population',gens[i],'.csv'))
currentfront = currentfront[,objectives]
for(j in 1:ncol(currentfront)){if(nrow(currentfront)>0){currentfront=currentfront[currentfront[,j]<bounds[j],]}}
vol=0
if(nrow(currentfront)>0){
currentpol = Polygon(currentfront[c(chull(x=currentfront[,objectives[1]],y=currentfront[,objectives[2]]),1),],hole = F)
vol=currentpol@area
}
volumes=append(volumes,nrow(currentfront))
}
return(list(gens=gens[2:length(gens)],volumes=volumes))
}
dists = polygonVolumes(sourcedir,bounds=c(33.5,800))
vols = polygonVolumes(sourcedir,bounds=c(33.5,800))
g=ggplot(data=data.frame(generation=dists$gens,volume=vols$volumes),aes(x=generation,y=volume))
g+geom_point()+geom_line()
ggsave(file=paste0(resdir,'volumes.png'),width=15,height=10,units='cm')
vols = polygonVolumes(sourcedir)
g=ggplot(data=data.frame(generation=dists$gens,volume=vols$volumes),aes(x=generation,y=volume))
g+geom_point()+geom_line()
ggsave(file=paste0(resdir,'volumes_nobounds.png'),width=15,height=10,units='cm')
d = rbind(cbind(pop31000,type='grid'),cbind(read.csv(file=paste0(oldcalib,'population42744.csv')),type='local'))
oldcalib = 'CALIB_intgib_BR_20181003_154646'
d = rbind(cbind(pop31000,type='grid'),cbind(read.csv(file=paste0(oldcalib,'population42744.csv')),type='local'))
d = rbind(cbind(pop31000,type='grid'),cbind(read.csv(file=paste0(oldcalib,'/population42744.csv')),type='local'))
g=ggplot(d,aes(x=logmse,y=mselog,color=type))
g+geom_point()
dim(read.csv(file=paste0(oldcalib,'/population42744.csv'))
)
dim(pop31000)
setwd(paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Models/urbangrowth/openmole/calibration'))
library(dplyr)
library(ggplot2)
source(paste0(Sys.getenv('CS_HOME'),'/Organisation/Models/Utils/R/plots.R'))
source(paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Models/Analysis/functions.R'))
sourcedir = 'CALIB_GRID_intgib_BR_20181209_185930/'
resdir = paste0(Sys.getenv('CS_HOME'),'/UrbanGrowth/Results/Calibration/',sourcedir);dir.create(resdir)
indics=c('logmse','mselog')
vols=hypervolumes(sourcedir,indics)
g=ggplot(data=data.frame(generation=vols$gens,volume=vols$vols),aes(x=generation,y=volume))
g+geom_point()+geom_line()
g=ggplot(data=data.frame(generation=vols$gens[2:length(vols$gens)],volumediff=diff(vols$vols)/max(vols$vols)),aes(x=generation,y=volumediff))
g+geom_point()+geom_line()
dists = frontDiffs(sourcedir)
g=ggplot(data=data.frame(generation=dists$gens,distance=dists$dists),aes(x=generation,y=distance))
g+geom_point()+geom_line()
ggsave(file=paste0(resdir,'frontdiffs.png'),width=15,height=10,units='cm')
pop96000 = read.csv(file=paste0(sourcedir,'population96000.csv'))
oldcalib = 'CALIB_intgib_BR_20181003_154646'
d = rbind(cbind(pop96000,type='grid'),cbind(read.csv(file=paste0(oldcalib,'/population42744.csv')),type='local'))
g=ggplot(d,aes(x=logmse,y=mselog,color=type))
g+geom_point()
d = rbind(cbind(pop96000,type='grid'),cbind(read.csv(file=paste0(oldcalib,'/population39261.csv')),type='local'))
oldcalib = 'CALIB_intgib_BR_20180921_173302'
d = rbind(cbind(pop96000,type='grid'),cbind(read.csv(file=paste0(oldcalib,'/population39261.csv')),type='local'))
g=ggplot(d,aes(x=logmse,y=mselog,color=type))
g+geom_point()
cbind(pop96000,type='grid')
cbind(read.csv(file=paste0(oldcalib,'/population39261.csv')),type='local')
local = cbind(read.csv(file=paste0(oldcalib,'/population39261.csv')),type='local')
summary(local)
summary(pop96000)
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining/Models/Semantic'))
classif04 = as.tbl(read.csv('classification/classification_window5_kwLimit100000_dispth0.06_ethunit4.1e-05/',sep=';'))
classif04 = as.tbl(read.csv(file='classification/classification_window5_kwLimit100000_dispth0.06_ethunit4.1e-05/',sep=';'))
classif04 = as.tbl(read.csv(file='classification/classification_window5_kwLimit100000_dispth0.06_ethunit4.1e-05/patent_2000-2004_kwLimit100000.0_dispth0.06_ethunit4.1e-05.csv',sep=';'))
classif
summary(classif04)
classif04[classif04$betweennesscentrality==max(classif04$betweennesscentrality),]
classif04 = as.tbl(read.csv(
file='classification/classification_window5_kwLimit100000_dispth0.06_ethunit4.1e-05/patent_2000-2004_kwLimit100000.0_dispth0.06_ethunit4.1e-05.csv',
sep=';',colClasses = c('character',rep('numeric',11)))
)
classif04
classif04[classif04$betweennesscentrality==max(classif04$betweennesscentrality),]
data.frame(classif04[classif04$betweennesscentrality==max(classif04$betweennesscentrality),])
keywords =c("gate insul layer", "amorph silicon", "use third mask", "use third", "pure",
"electrod align layer", "activ layer pure", "data", "pattern second metal", "display devic",
"third mask", "thermal-tr furnac cure", "form gate", "second", "substrat", "have sourc electrod",
"insul", "metal", "transistor method", "devic", "form gate line", "crystal display",
"transistor method form", "gate insul", "first mask", "have gate", "in-plan", "electrod align",
"first", "plural common", "data line have", "layer use", "pattern second", "electrod gate",
"layer semiconductor layer", "mask form data", "amorph silicon second", "anneal thin", "amorph",
"ohmic contact layer", "use second", "display devic have", "line have gate", "align layer",
"insul layer", "layer semiconductor", "insul layer use", "silicon", "common electrod", "crystal",
"metal layer semiconductor", "layer impurity-dop amorph", "substrat have", "layer impurity-dop",
"mask", "form", "contact layer impurity-dop", "pure amorph silicon", "have", "common", "activ layer",
"connect line", "common line", "anneal thin film", "thin film", "have plural pixel", "form array substrat",
"method form", "film", "method", "array", "have sourc", "devic have align", "ohmic contact", "silicon second",
"connect", "devic have", "thermal-tr furnac", "switch liquid", "third mask form", "form data", "channel",
"sourc electrod", "line", "display", "sourc electrod channel", "align", "line have plural", "impurity-dop",
"align film", "drain", "array substrat", "common electrod gate", "plural pixel electrod",
"have plural common", "first metal layer", "contact layer", "pixel electrod", "activ",
"film transistor method", "use second mask", "gate electrod", "pattern", "drain electrod", "third",
"line have sourc", "electrod gate insul", "layer use second", "second mask", "have align film", "have plural",
"second metal", "line have", "have gate electrod", "metal layer", "gate", "connect line have", "pixel", "data line",
"cure", "transistor", "liquid crystal display", "film transistor", "first mask form", "thin",
"plural pixel", "semiconductor", "contact", "form data line", "form array", "ohmic", "plural",
"use first", "semiconductor layer", "common line have", "thermal-tr", "switch liquid crystal",
"layer pure", "portion", "switch", "electrod channel", "gate line", "method form array",
"pure amorph", "furnac", "etch", "second metal layer", "gate line have", "anneal", "crystal display devic",
"liquid", "use", "have align", "in-plan switch liquid", "use first mask", "sourc", "layer", "mask form",
"plural common electrod", "layer pure amorph", "thin film transistor", "impurity-dop amorph",
"liquid crystal", "impurity-dop amorph silicon", "in-plan switch", "electrod", "drain electrod align",
"etch portion", "mask form gate", "first metal", "furnac cure", "silicon second metal")
keywords04 = as.tbl(read.csv(
file='classification/classification_window5_kwLimit100000_dispth0.06_ethunit4.1e-05/keywords_2000-2004_kwLimit100000.0_dispth0.06_ethunit4.1e-05.csv',
sep = ';'
))
keywords04
keywords04 = as.tbl(read.csv(
file='classification/classification_window5_kwLimit100000_dispth0.06_ethunit4.1e-05/keywords_2000-2004_kwLimit100000.0_dispth0.06_ethunit4.1e-05.csv',
sep = ';',colClasses = c('character',rep('numeric',10))
))
keywords04
selkws = keywords[keywords%in%keywords04$keyword]
selkws
data.frame(classif04[classif04$classkws==max(classif04$classkws),])
selkws
keywords04
rownames(keywords04)<-keywords04$keyword
keywords04[selkws,]
selkws
keywords04[selkws,]
lsekwsmeasures = keywords04[selkws,]
selkwsmeasures = keywords04[selkws,]
sort(selkwsmeasures$betweennesscentrality,decreasing = T)
sort(selkwsmeasures$betweennesscentrality,decreasing = T)[1:5]
order(selkwsmeasures$betweennesscentrality,decreasing = T)[1:5]
selkwsmeasures[order(selkwsmeasures$betweennesscentrality,decreasing = T)[1:5],]
data.frame(selkwsmeasures[order(selkwsmeasures$betweennesscentrality,decreasing = T)[1:5],])
data.frame(selkwsmeasures[order(selkwsmeasures$eigenvectorcentrality,decreasing = T)[1:5],])
data.frame(selkwsmeasures[order(selkwsmeasures$closenesscentrality,decreasing = T)[1:5],])
data.frame(selkwsmeasures[order(selkwsmeasures$weighteddegree,decreasing = T)[1:5],])
data.frame(selkwsmeasures[order(selkwsmeasures$degree,decreasing = T)[1:5],])
data.frame(selkwsmeasures[order(selkwsmeasures$tidf,decreasing = T)[1:5],])
data.frame(selkwsmeasures[order(selkwsmeasures$termhood,decreasing = T)[1:5],])
