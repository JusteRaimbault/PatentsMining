}
V(g)[tomove]$y = y0
}
maxangles=append(maxangles,max(currentmaxs))
}
plot.igraph(g,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
for(currentyear in wyears){
V(g)$y[V(g)$year==currentyear]=(1:length(which(V(g)$year==currentyear)))*deltaymin
}
nruns = 100
maxangles=c()
for(r in 1:nruns){
show(r);
currentmaxs=c()
for(currentyear in wyears[2:length(wyears)]){
incoming = E(g)[which(V(g)$year==(currentyear-1))%->%which(V(g)$year==currentyear)]
diff = abs(head_of(g,incoming)$y - tail_of(g,incoming)$y)
angles = atan(1/diff)/(pi/2)*incoming$weight
# move vertex with largest weighted angle
#show(max(angles))
emove = incoming[angles==max(angles)]
y0=head_of(g,emove)$y
currentmaxs=append(currentmaxs,max(angles))
tomove = tail_of(g,emove);yp=tomove$y;
alltail = tail_of(g,incoming);
if(yp>y0){
intermediary = alltail$y<yp&alltail$y>=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]+deltaymin
}else{
intermediary = alltail$y>yp&alltail$y<=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]-deltaymin
}
V(g)$y[tomove] = y0
}
maxangles=append(maxangles,max(currentmaxs))
}
plot.igraph(g,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
V(g)$y[tomove]
y0
V(g)$y[intermediary]
intermediary
yp
for(currentyear in wyears){
V(g)$y[V(g)$year==currentyear]=(1:length(which(V(g)$year==currentyear)))*deltaymin
}
nruns = 100
maxangles=c()
for(r in 1:nruns){
show(r);
currentmaxs=c()
for(currentyear in wyears[2:length(wyears)]){
incoming = E(g)[which(V(g)$year==(currentyear-1))%->%which(V(g)$year==currentyear)]
diff = abs(head_of(g,incoming)$y - tail_of(g,incoming)$y)
angles = atan(1/diff)/(pi/2)*incoming$weight
# move vertex with largest weighted angle
#show(max(angles))
emove = incoming[angles==max(angles)]
y0=head_of(g,emove)$y
currentmaxs=append(currentmaxs,max(angles))
tomove = tail_of(g,emove);yp=tomove$y;
alltail = tail_of(g,incoming);
if(yp>y0){
intermediary = alltail$y<yp&alltail$y>=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]+deltaymin
}else{
intermediary = alltail$y>yp&alltail$y<=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]-deltaymin
}
V(g)$y[tomove] = y0
show(yp-y0)
}
maxangles=append(maxangles,max(currentmaxs))
}
nruns = 100
maxangles=c()
for(r in 1:nruns){
show(r);
currentmaxs=c()
for(currentyear in wyears[2:length(wyears)]){
incoming = E(g)[which(V(g)$year==(currentyear-1))%->%which(V(g)$year==currentyear)]
diff = abs(head_of(g,incoming)$y - tail_of(g,incoming)$y)
angles = atan(1/diff)/(pi/2)*incoming$weight
# move vertex with largest weighted angle
show(max(angles))
emove = incoming[angles==max(angles)]
y0=head_of(g,emove)$y
currentmaxs=append(currentmaxs,max(angles))
tomove = tail_of(g,emove);yp=tomove$y;
alltail = tail_of(g,incoming);
if(yp>y0){
intermediary = alltail$y<yp&alltail$y>=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]+deltaymin
}else{
intermediary = alltail$y>yp&alltail$y<=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]-deltaymin
}
V(g)$y[tomove] = y0
show(yp-y0)
}
maxangles=append(maxangles,max(currentmaxs))
}
for(currentyear in wyears){
V(g)$y[V(g)$year==currentyear]=(1:length(which(V(g)$year==currentyear)))*deltaymin
}
nruns = 100
maxangles=c()
for(r in 1:nruns){
show(r);
currentmaxs=c()
for(currentyear in wyears[2:length(wyears)]){
incoming = E(g)[which(V(g)$year==(currentyear-1))%->%which(V(g)$year==currentyear)]
diff = abs(head_of(g,incoming)$y - tail_of(g,incoming)$y)
angles = atan(diff)/(pi/2)*incoming$weight
# move vertex with largest weighted angle
show(max(angles))
emove = incoming[angles==max(angles)]
y0=head_of(g,emove)$y
currentmaxs=append(currentmaxs,max(angles))
tomove = tail_of(g,emove);yp=tomove$y;
alltail = tail_of(g,incoming);
if(yp>y0){
intermediary = alltail$y<yp&alltail$y>=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]+deltaymin
}else{
intermediary = alltail$y>yp&alltail$y<=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]-deltaymin
}
V(g)$y[tomove] = y0
show(yp-y0)
}
maxangles=append(maxangles,max(currentmaxs))
}
for(currentyear in wyears){
V(g)$y[V(g)$year==currentyear]=(1:length(which(V(g)$year==currentyear)))*deltaymin
}
nruns = 100
maxangles=c()
for(r in 1:nruns){
show(r);
currentmaxs=c()
for(currentyear in wyears[2:length(wyears)]){
incoming = E(g)[which(V(g)$year==(currentyear-1))%->%which(V(g)$year==currentyear)]
diff = abs(head_of(g,incoming)$y - tail_of(g,incoming)$y)
angles = atan(diff)/(pi/2)*incoming$weight
# move vertex with largest weighted angle
#show(max(angles))
emove = incoming[angles==max(angles)]
y0=head_of(g,emove)$y
currentmaxs=append(currentmaxs,max(angles))
tomove = tail_of(g,emove);yp=tomove$y;
alltail = tail_of(g,incoming);
if(yp>y0){
intermediary = alltail$y<yp&alltail$y>=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]+deltaymin
}else{
intermediary = alltail$y>yp&alltail$y<=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]-deltaymin
}
V(g)$y[tomove] = y0
#show(yp-y0)
}
maxangles=append(maxangles,max(currentmaxs))
}
plot.igraph(g,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
for(currentyear in wyears){
V(g)$y[V(g)$year==currentyear]=(1:length(which(V(g)$year==currentyear)))*deltaymin
}
plot.igraph(g,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
nruns = 10
maxangles=c()
for(r in 1:nruns){
show(r);
currentmaxs=c()
for(currentyear in wyears[2:length(wyears)]){
incoming = E(g)[which(V(g)$year==(currentyear-1))%->%which(V(g)$year==currentyear)]
diff = abs(head_of(g,incoming)$y - tail_of(g,incoming)$y)
angles = atan(diff)/(pi/2)*incoming$weight
# move vertex with largest weighted angle
#show(max(angles))
emove = incoming[angles==max(angles)]
y0=head_of(g,emove)$y
currentmaxs=append(currentmaxs,max(angles))
tomove = tail_of(g,emove);yp=tomove$y;
alltail = tail_of(g,incoming);
if(yp>y0){
intermediary = alltail$y<yp&alltail$y>=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]+deltaymin
}else{
intermediary = alltail$y>yp&alltail$y<=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]-deltaymin
}
V(g)$y[tomove] = y0
#show(yp-y0)
}
maxangles=append(maxangles,max(currentmaxs))
}
plot.igraph(g,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
for(currentyear in wyears){
V(g)$y[V(g)$year==currentyear]=(1:length(which(V(g)$year==currentyear)))*deltaymin
}
nruns = 10
maxangles=c()
for(r in 1:nruns){
show(r);
currentmaxs=c()
for(currentyear in wyears[2:length(wyears)]){
incoming = E(g)[which(V(g)$year==(currentyear-1))%->%which(V(g)$year==currentyear)]
diff = abs(head_of(g,incoming)$y - tail_of(g,incoming)$y)
angles = atan(diff)/(pi/2)*incoming$weight
# move vertex with largest weighted angle
#show(max(angles))
emove = incoming[angles==max(angles)]
y0=tail_of(g,emove)$y
currentmaxs=append(currentmaxs,max(angles))
tomove = head_of(g,emove);yp=tomove$y;
alltail = head_of(g,incoming);
if(yp>y0){
intermediary = alltail$y<yp&alltail$y>=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]+deltaymin
}else{
intermediary = alltail$y>yp&alltail$y<=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]-deltaymin
}
V(g)$y[tomove] = y0
#show(yp-y0)
}
maxangles=append(maxangles,max(currentmaxs))
}
plot.igraph(g,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
nruns = 100
maxangles=c()
for(r in 1:nruns){
show(r);
currentmaxs=c()
for(currentyear in wyears[2:length(wyears)]){
incoming = E(g)[which(V(g)$year==(currentyear-1))%->%which(V(g)$year==currentyear)]
diff = abs(head_of(g,incoming)$y - tail_of(g,incoming)$y)
angles = atan(diff)/(pi/2)*incoming$weight
# move vertex with largest weighted angle
#show(max(angles))
emove = incoming[angles==max(angles)]
y0=tail_of(g,emove)$y
currentmaxs=append(currentmaxs,max(angles))
tomove = head_of(g,emove);yp=tomove$y;
alltail = head_of(g,incoming);
if(yp>y0){
intermediary = alltail$y<yp&alltail$y>=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]+deltaymin
}else{
intermediary = alltail$y>yp&alltail$y<=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]-deltaymin
}
V(g)$y[tomove] = y0
#show(yp-y0)
}
maxangles=append(maxangles,max(currentmaxs))
}
plot.igraph(g,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
nruns = 100
maxangles=c()
for(r in 1:nruns){
show(r);
currentmaxs=c()
for(currentyear in wyears[2:length(wyears)]){
incoming = E(g)[which(V(g)$year==(currentyear-1))%->%which(V(g)$year==currentyear)]
diff = abs(head_of(g,incoming)$y - tail_of(g,incoming)$y)
angles = atan(diff)/(pi/2)*incoming$weight
# move vertex with largest weighted angle
#show(max(angles))
emove = incoming[angles==max(angles)]
y0=tail_of(g,emove)$y
currentmaxs=append(currentmaxs,max(angles))
tomove = head_of(g,emove);yp=tomove$y;
alltail = head_of(g,incoming);
if(yp>y0){
intermediary = alltail$y<yp&alltail$y>=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]+deltaymin
}else{
intermediary = alltail$y>yp&alltail$y<=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]-deltaymin
}
V(g)$y[tomove] = y0
#show(yp-y0)
}
maxangles=append(maxangles,max(currentmaxs))
currentmaxs=c()
for(currentyear in wyears[seq(from=length(wyears)-1,to=1,by=-1)]){
incoming = E(g)[which(V(g)$year==currentyear)%->%which(V(g)$year==(currentyear+1))]
diff = abs(head_of(g,incoming)$y - tail_of(g,incoming)$y)
angles = atan(diff)/(pi/2)*incoming$weight
# move vertex with largest weighted angle
#show(max(angles))
emove = incoming[angles==max(angles)]
y0=head_of(g,emove)$y
currentmaxs=append(currentmaxs,max(angles))
tomove = tail_of(g,emove);yp=tomove$y;
alltail = tail_of(g,incoming);
if(yp>y0){
intermediary = alltail$y<yp&alltail$y>=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]+deltaymin
}else{
intermediary = alltail$y>yp&alltail$y<=y0;
V(g)$y[intermediary]=V(g)$y[intermediary]-deltaymin
}
V(g)$y[tomove] = y0
#show(yp-y0)
}
maxangles=append(maxangles,max(currentmaxs))
}
plot.igraph(g,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
years=as.character(wyears)
#sizeTh=100
sizeQuantile = 0.985
links=list();
nodes=list()
# data.frame with source (id), target (id) and value = weight
novelties=data.frame();cumnovs=c()
k=1;kn=0
for(t in 2:length(years)){
show(years[t])
prec = coms[[years[t-1]]];current = coms[[years[t]]]
cumnov=0
currentsizes=sapply(current,length)
precsizes=sapply(prec,length)
for(i in 1:length(current)){
if(length(current[[i]])>quantile(currentsizes,sizeQuantile)){
if(i%%100==0){show(i/length(current))}
novelty=1
for(j in 1:length(prec)){
if(length(current[[i]])>quantile(precsizes,sizeQuantile)){
weight = similarityIndex(unlist(prec[[j]]),unlist(current[[i]]))
novelty=novelty-weight^2
if(weight>0.01&length(prec[[j]])>20&length(current[[i]]>20)){
# need community names indexing the list
precname=paste0(names(prec)[j],"_",years[t-1]);currentname=paste0(names(current)[i],"_",years[t])
if(!(precname %in% names(nodes))){nodes[[precname]]=kn;kn=kn+1}
if(!(currentname %in% names(nodes))){nodes[[currentname]]=kn;kn=kn+1}
links[[k]] = c(nodes[[precname]],nodes[[currentname]],weight)
k = k + 1
}
}
}
#novelties=rbind(novelties,c(years[t],novelty*length(current[[i]])/sum(unlist(lapply(current,length)))))
#cumnov=cumnov+novelty*length(current[[i]])/sum(unlist(lapply(current,length)))
}
}
#cumnovs=append(cumnovs,cumnov)
}
# plot(years[2:length(years)],cumnovs,type='l')
#
#names(novelties)<-c("year","novelty")
#g=ggplot(novelties,aes(year,novelty))
#g+geom_point()+geom_smooth()
mlinks=as.data.frame(matrix(data = unlist(links),ncol=3,byrow=TRUE))
names(mlinks)<-c("from","to","weight")
#mlinks$weight=1000*mlinks$weight
mnodes = data.frame(id=0:(length(nodes)-1),name=names(nodes))
g = graph_from_data_frame(mlinks,vertices=mnodes)
V(g)$year=as.numeric(sapply(V(g)$name,function(x){substring(text=x,first=nchar(x)-3)}))
V(g)$comname = sapply(V(g)$name,function(x){substring(text=x,first=1,last=nchar(x)-5)})
# specific algo for layout, using weight proximity
V(g)$x=V(g)$year
plot.igraph(g,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
V(g)$x=V(g)$year
# greedy algo optimisation
# uniform init
deltaymin = 0.5
#V(g)$y = runif(vcount(g),min=0,max=deltaymin*length(which(V(g)$year==wyears[1])))
for(currentyear in wyears){
V(g)$y[V(g)$year==currentyear]=(1:length(which(V(g)$year==currentyear)))*deltaymin
}
plot.igraph(g,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
help(components)
subgraph.edges()
help("subgraph.edges")
gg = subgraph.edges(g, which(E(g)$weight>0.5))
plot.igraph(gg,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
gg = subgraph.edges(g, which(E(g)$weight>0.2))
plot.igraph(gg,#layout=layout_as_tree(g),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
gg = subgraph.edges(g, which(E(g)$weight>0.1))
gg = subgraph.edges(g, which(E(g)$weight>0.1))
plot.igraph(gg,layout=layout_components(gg),
vertex.size=0.3,vertex.label=NA,#vertex.label.cex=0,
edge.arrow.size=0,edge.width=5*E(g)$weight#,
#edge.curved=TRUE,margin=0
)
plot.igraph(gg,layout=layout_components(gg),
vertex.size=0.3,vertex.label=V(gg)$comname,vertex.label.cex=1,
edge.arrow.size=0,edge.width=5*E(gg)$weight#,
#edge.curved=TRUE,margin=0
)
plot.igraph(gg,layout=layout_components(gg),
vertex.size=0.3,vertex.label=V(gg)$comname,vertex.label.cex=0.1,
edge.arrow.size=0,edge.width=5*E(gg)$weight#,
#edge.curved=TRUE,margin=0
)
plot.igraph(gg,layout=layout_components(gg),
vertex.size=0.3,vertex.label=V(gg)$comname,vertex.label.cex=0.5,
edge.arrow.size=0,edge.width=5*E(gg)$weight#,
#edge.curved=TRUE,margin=0
)
# get connex components
gg = subgraph.edges(g, which(E(g)$weight>0.05))
plot.igraph(gg,layout=layout_components(gg),
vertex.size=0.3,vertex.label=V(gg)$comname,vertex.label.cex=0.5,
edge.arrow.size=0,edge.width=5*E(gg)$weight#,
#edge.curved=TRUE,margin=0
)
gg = subgraph.edges(g, which(E(g)$weight>0.025))
plot.igraph(gg,layout=layout_components(gg),
vertex.size=0.3,vertex.label=V(gg)$name,vertex.label.cex=0.3,
edge.arrow.size=0,edge.width=5*E(gg)$weight#,
#edge.curved=TRUE,margin=0
)
gg = subgraph.edges(g, which(E(g)$weight>0.04))
plot.igraph(gg,layout=layout_components(gg),
vertex.size=0.3,vertex.label=V(gg)$name,vertex.label.cex=0.3,
edge.arrow.size=0,edge.width=5*E(gg)$weight#,
#edge.curved=TRUE,margin=0
)
plot.igraph(gg,layout=layout_with_fr(gg),
vertex.size=0.3,vertex.label=V(gg)$name,vertex.label.cex=0.3,
edge.arrow.size=0,edge.width=5*E(gg)$weight#,
#edge.curved=TRUE,margin=0
)
wyears = 1980:2007
windowSize=5
kwLimitNum="100000.0"
kwLimit="100000"
dispth=0.06
ethunit="4.1e-05"
classifdir = paste0('classification_window',windowSize,'_kwLimit',kwLimit,'_dispth',dispth,'_ethunit',ethunit)
semprefix = paste0('classification/',classifdir,'/keywords_')
semsuffix = paste0('_kwLimit',kwLimitNum,'_dispth',dispth,'_ethunit',ethunit,'.csv')
# communities as list in time of list of kws
#   list(year1 = list(com1 = c(...), com2 = c(...)))
year=1980
yearrange=paste0((year-windowSize+1),"-",year);show(year)
currentkws = as.tbl(read.csv(file=paste0(semprefix,yearrange,semsuffix),sep=";",stringsAsFactors = FALSE))
currentkws
plotdata=data.frame()
for(year in wyears){
yearrange=paste0((year-windowSize+1),"-",year);show(year)
currentkws = as.tbl(read.csv(file=paste0(semprefix,yearrange,semsuffix),sep=";",stringsAsFactors = FALSE))
plotdata=rbind(plotdata,data.frame(technodisp=currentkws$technodispersion,year=rep(year,nrow(currentkws))))
currentcoms = list()
for(i in unlist(unique(currentkws$community))){
rows = currentkws[currentkws$community==i,]
# try to name by best techno disp
name =unlist(rows[rows$technodispersion==max(rows$technodispersion),1])[1] #Reduce(function(s1,s2){return(paste0(s1," ; ",s2))},unlist(rows[rows$technodispersion==max(rows$technodispersion),1])[1:2])
currentcoms[[name]]=unlist(rows[,1])
}
coms[[as.character(year)]]=currentcoms
}
g=ggplot(plotdata)
library(ggplot2)
g=ggplot(plotdata)
g+geom_density(aes(x=technodisp,colour=year))
plotdata
unique(plotdata$year)
g=ggplot(plotdata)
g+geom_density(aes(x=technodisp,colour=as.character(year)))
gsum=ggplot(plotdata%>%group_by(year)%>%summarise(meantechdisp=mean(technodisp)),aes(x=year,y=meantechdisp))
gsum+geom_point()+geom_line()
