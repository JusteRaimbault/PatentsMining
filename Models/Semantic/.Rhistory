clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
ccoef=append(ccoef,clust$tot.withinss/clust$betweenss)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k),xlab="",ylab="",xaxt='n',yaxt='n')
}
ccoef
vars = c(3,4,5,6)
ccoef=c()
for(k in 2:15){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
ccoef=append(ccoef,clust$tot.withinss/(clust$betweenss+clust$tot.withinss))# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k),xlab="",ylab="",xaxt='n',yaxt='n')
}
ccoef
vars = c(3,4,5,6)
ccoef=c()
par(mfrow=c(3,3))
for(k in 2:11){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
withinProp=clust$tot.withinss/(clust$betweenss+clust$tot.withinss)
ccoef=append(ccoef,withinProp)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k,' ; withinProp=',withinProp),xlab="",ylab="",xaxt='n',yaxt='n')
}
vars = c(3,4,5,6)
ccoef=c()
par(mfrow=c(3,3))
for(k in 3:11){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
withinProp=clust$tot.withinss/(clust$betweenss+clust$tot.withinss)
ccoef=append(ccoef,withinProp)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k,' ; withinProp=',withinProp),xlab="",ylab="",xaxt='n',yaxt='n')
}
shiny::runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/Cybergeo20')
help("forceNetwork")
shiny::runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
library(ggplot2)
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n)}
nextDistrib <- function(p){sample(growthRates*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
}
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
}
pops
g=ggplot(data.fram(pops,times))
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=times))
times
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))
mean(p0)
help("geom_density")
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=0.5,sd = 1)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)+xlim(c(-1,1))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)+xlim(c(-0.01,0.01))
end(pops)
help(end)
pops[(length(pops)-100):length(pops)]
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=0.5,sd = 1)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:2){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend = FALSE)
g+geom_density(aes(x=pops,colour=as.character(times)))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-10,10))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.05,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:2){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-10,10))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
for(t in 1:10){
}
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.05,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
growthRates<-function(){rnorm(n,mean=1,sd = 0.05)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:10){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
n=10000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:30){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)))+xlim(c(-2,10))
g=ggplot(data.frame(pops,times),aes(colour=times))
g+geom_density(aes(x=pops))+xlim(c(-2,10))
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,10))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
n=100000
p0 = rlnorm(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:30){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p/mean(p));times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p-mean(p));times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
p0=runif(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p-mean(p));times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
pops=p0;times=rep(0,n)
p=p0
for(t in 1:50){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
n=100000
#p0 = rlnorm(n)
p0=runif(n)
growthRates<-function(){rnorm(n,mean=1.1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
g=ggplot(data.frame(pops,times))
g+geom_density(aes(x=pops,colour=as.character(times)),show.legend=FALSE)+xlim(c(-2,20))
hist(p,plot=FALSE)
p0 = rlnorm(n)
#p0=runif(n)
growthRates<-function(){rnorm(n,mean=1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
p0=runif(n)
growthRates<-function(){rnorm(n,mean=1,sd = 0.05)}
nextDistrib <- function(p){sample(growthRates()*p,n)}
pops=p0;times=rep(0,n)
p=p0
for(t in 1:100){
p=nextDistrib(p)
pops=append(pops,p);times=append(times,rep(t,n))
show(mean(p))
}
gc()
gc()
spatializedExpMixtureDensity <- function(gridSize,N,alpha,proba=TRUE,rmin=0,rmax=0,Pmax=1,tolThreshold=0,kernel_type="poisson"){
if(rmin==0){rmin = gridSize/N}
if(rmax==0){rmax = gridSize/N}
# patches of the grid are 1 unit size (in r_min/max units)
grid = matrix(0,gridSize,gridSize)
# matrix of coordinates
coords = matrix(c(c(matrix(rep(1:gridSize,gridSize),nrow=gridSize)),c(matrix(rep(1:gridSize,gridSize),nrow=gridSize,byrow=TRUE))),nrow=gridSize^2)
# first draw param distribs ? not needed
# for exp distribs, P_i = 2pi*d_i*r_i^2
#  -> take P from deterministic distrib ; draw r.
for(i in 1:N){
#show(i)
pop_i = Pmax*i^{-alpha}
r_i = runif(1,min=rmin,max=rmax)
d_i = pop_i / (2*pi*(r_i^2))
# find origin of that kernel
#  -> one of points such that : d(bord) > rcut and \forall \vec{x}\in D(rcut),d(\vec{x})<tolThr.
#pot = which(!pseudoClosing(grid>tolThreshold,r_i),arr.ind=TRUE)
#show(length(pot))
#if(length(pot)==0){
#  # Take a point with minimal density ?
#  pot = which(grid==min(grid),arr.ind=TRUE)
#}
# simplify : take deterministiquely (almost, after two exps only two points possible)
# BUT not close to border
#rbord = 2*rmax*log(Pmax/tolThreshold)
rbord = 2*rmax
# random center
if(max(grid)==0){
# random if no center yet
center = matrix(runif(2,min=rbord+1,max=gridSize-rbord),nrow=1)
}
else {
# else find min pop area not too close to border
pot = which(grid==min(grid[(rbord+1):(gridSize-rbord),(rbord+1):(gridSize-rbord)]),arr.ind=TRUE)
row = sample(nrow(pot),1)
center = matrix(pot[row,],nrow=1)
}
# add kernel : use kernlab laplace kernel or other
if(kernel_type=="poisson"){ker=laplacedot(sigma=1/r_i)}
if(kernel_type=="gaussian"){ker=rbfdot(sigma=1/(2*r_i^2))}
#if(kernel_type="quadratic"){ker=} # is quad kernel available ?
grid = grid + (d_i * matrix(kernelMatrix(kernel=laplacedot(sigma=1/r_i),x=coords,y=center),nrow=gridSize))
}
if(proba==TRUE){grid = grid / sum(grid)}
return(grid)
}
test = spatializedExpMixtureDensity(100,2,0.7)
library(kernlab)
test = spatializedExpMixtureDensity(100,10,0.7)
#test = spatializedExpMixtureDensity(100,3,0.7)
test = spatializedExpMixtureDensity(100,3,0.7)
test = spatializedExpMixtureDensity(100,4,0.7)
test = spatializedExpMixtureDensity(100,5,0.7)
spatializedExpMixtureDensity <- function(gridSize,N,alpha,proba=TRUE,rmin=0,rmax=0,Pmax=1,tolThreshold=0,kernel_type="poisson"){
if(rmin==0){rmin = gridSize/N}
if(rmax==0){rmax = gridSize/N}
# patches of the grid are 1 unit size (in r_min/max units)
grid = matrix(0,gridSize,gridSize)
# matrix of coordinates
coords = matrix(c(c(matrix(rep(1:gridSize,gridSize),nrow=gridSize)),c(matrix(rep(1:gridSize,gridSize),nrow=gridSize,byrow=TRUE))),nrow=gridSize^2)
# first draw param distribs ? not needed
# for exp distribs, P_i = 2pi*d_i*r_i^2
#  -> take P from deterministic distrib ; draw r.
for(i in 1:N){
show(i)
pop_i = Pmax*i^{-alpha}
r_i = runif(1,min=rmin,max=rmax)
d_i = pop_i / (2*pi*(r_i^2))
# find origin of that kernel
#  -> one of points such that : d(bord) > rcut and \forall \vec{x}\in D(rcut),d(\vec{x})<tolThr.
#pot = which(!pseudoClosing(grid>tolThreshold,r_i),arr.ind=TRUE)
#show(length(pot))
#if(length(pot)==0){
#  # Take a point with minimal density ?
#  pot = which(grid==min(grid),arr.ind=TRUE)
#}
# simplify : take deterministiquely (almost, after two exps only two points possible)
# BUT not close to border
#rbord = 2*rmax*log(Pmax/tolThreshold)
rbord = 2*rmax
# random center
if(max(grid)==0){
# random if no center yet
center = matrix(runif(2,min=rbord+1,max=gridSize-rbord),nrow=1)
}
else {
# else find min pop area not too close to border
pot = which(grid==min(grid[(rbord+1):(gridSize-rbord),(rbord+1):(gridSize-rbord)]),arr.ind=TRUE)
row = sample(nrow(pot),1)
center = matrix(pot[row,],nrow=1)
}
# add kernel : use kernlab laplace kernel or other
if(kernel_type=="poisson"){ker=laplacedot(sigma=1/r_i)}
if(kernel_type=="gaussian"){ker=rbfdot(sigma=1/(2*r_i^2))}
#if(kernel_type="quadratic"){ker=} # is quad kernel available ?
grid = grid + (d_i * matrix(kernelMatrix(kernel=laplacedot(sigma=1/r_i),x=coords,y=center),nrow=gridSize))
}
if(proba==TRUE){grid = grid / sum(grid)}
return(grid)
}
test = spatializedExpMixtureDensity(100,5,0.7)
test = spatializedExpMixtureDensity(100,4,0.7)
test = spatializedExpMixtureDensity(100,5,0.7)
persp3D(z=test)
library(plot3D)
persp3D(z=test)
test = spatializedExpMixtureDensity(100,10,0.7)
test = spatializedExpMixtureDensity(100,20,0.7)
persp3D(z=test)
library(igraph)
hep(simplify())
help(simplify)
localGraph=list()
localGraph$gg
is.null(localGraph$gg)
48*400
help(try)
#'   ! assuming q > 0
quantilesToHist<-function(q){
mids=c();density=c()
a = 1/length(q)
qq=c(0,q)
for(i in 1:length(q)){mids = append(mids,(qq[i]+qq[i+1])/2);density=append(density,a/(qq[i+1]-qq[i]))}
res=list()
res$mids=mids;res$density=density
return(res)
}
quantilesToHist(1:10)
help("try")
tryCatch({x+1})
tryCatch({x+1},error=function(e){show("tos")})
tryCatch({x+1},error=function(e){return("tos")})
tryCatch({x+1},error=function(e){return(2)})
tryCatch({x+1},error=function(e){res=2})
res
library(raster)
help("focal")
strsplit("1998;2008;2554")
strsplit("1998;2008;2554",";")
strsplit("1998;2008;2554",";")[[1]]
kwNum = 100000
yearRange=c(1976,1977,1978,1979,1980)
year = paste0(as.character(yearRange[1]),"-",as.character(yearRange[length(yearRange)]))
paste0('relevant.relevant_',year,'_full_',kwNum)
paste0('relevant.relevant_',year,'_full_',kwNum)
5*6*3*10*5
5*6*3*10*5*3
5*6*3*10*5*3*20
5*6*3*10*5*7*20
getwd()
pop = load('Data/GibratSim/countriesPop.RData')
pop
CHina
China
library(dplyr)
as.tbl(China)
China[9000:9100,]
as.tbl(China_Historic)
mmax(China$`2010`)
max(China$`2010`)
hist(China$`2010`,breaks=500)
library(ggplot2)
g=ggplot(China)
d=data.frame()
for(j in 5:8){
d=rbind(d,cbind(sort(China[,j],decreasing = TRUE),1:nrow(China),rep(colnames(China)[j],nrow(China))))
}
sort(China[,j],decreasing = TRUE)
1:nrow(China)
d=data.frame()
for(j in 5:8){
d=rbind(d,data.frame(sort(China[,j],decreasing = TRUE),1:nrow(China),rep(colnames(China)[j],nrow(China))))
}
nrow(China)
China[,j]
d=data.frame()
for(j in 5:8){
d=rbind(d,data.frame(sort(China[,j],decreasing = TRUE,na.last = TRUE),1:nrow(China),rep(colnames(China)[j],nrow(China))))
}
colnames(d)<-c("size","rank","year")
colnames(d)
dim(d)
g=ggplot(d)
g+geom_point(aes(x=rnake,y=size,colour=year))
g+geom_point(aes(x=rank,y=size,colour=year))
g+geom_point(aes(x=log(rank),y=log(size),colour=year))
help("geom_bar")
192000 * 109 / 200
192000 * 109 / 200 / 3600
192000 * 109 / 200 / 3600 / 10
192000 * 109 / 200 / 3600 / 20
14/1.38
50*49/2
d=read.csv('/Users/Juste/Documents/ComplexSystems/EnergyPrice/Models/DataCollection/test/data/test_all.csv')
d=read.csv('/Users/Juste/Documents/ComplexSystems/EnergyPrice/Models/DataCollection/test/data/test_all.csv',sep=";")
d
head(d)
d=read.csv('/Users/Juste/Documents/ComplexSystems/EnergyPrice/Models/DataCollection/test/data/test_all.csv',sep=";",header=FALSE)
head(d)
head(d,n = 100)
which(d[,2]==0)
which(d[,2]==2)
unique(d[,2])
help(apply)
help(Matrix)
library(Matrix)
help("Matrix")
library(raster)
help("focal")
NCmisc::estimate.memory()
install.packages("NCmisc")
NCmisc::estimate.memory()
library(NCmisc)
help("estimate.memory")
library(Matrix)
library(ggplot2)
library(dplyr)
library(reshape2)
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining/Models/Semantic'))
wyears = 1980:2012
windowSize=5
kwLimit="100000"
